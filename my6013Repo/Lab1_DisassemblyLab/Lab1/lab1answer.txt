Q1:
#include <cstdio>

int add(int a, int b){
  return(a+b);
}

int main(){
  printf("%d",add(3,1));
  return 0;
}


Q2 & Q3:

add(int, int):
        push    rbp                    // back up the old value for rbp 
        mov     rbp, rsp               // assign rbp to the first stack frame of the function because the rsp will move forward and rbp is fixed
        mov     DWORD PTR [rbp-4], edi // put the value in edi into the memory address of rbp-4 (DWORD PTR means the size of the target operand is 32 bits)
        mov     DWORD PTR [rbp-8], esi // put the value in esi into the memory address of rbp-8 (DWORD PTR means the size of the target operand is 32 bits)
        mov     edx, DWORD PTR [rbp-4] // put the value in the memory address of rbp-4 to edx
        mov     eax, DWORD PTR [rbp-8] // put the value in the memory address of rbp-8 to eax
        add     eax, edx               // add eax and edx, then put the value into eax
        pop     rbp                    // retrieve rbp to the previous address before calling this function
        ret                            // return the value in eax
.LC0:
        .string "%d"
main:
        push    rbp           // back up the old value for rbp 
        mov     rbp, rsp      // assign rbp to the first stack frame of the function because the rsp will move forward and rbp is fixed
        mov     esi, 1        // put the value 1 into esi 
        mov     edi, 3        // save the value 3 into edi 
        call    add(int, int) // call function add
        mov     esi, eax      // save the return value of add function from eax into esi
        mov     edi, OFFSET FLAT:.LC0 // grab that label and put it in edi
        mov     eax, 0        // put the value 0 into eax first before calling printf which is a necessary for system call because printf has a function called write
        call    printf        // call printf function
        mov     eax, 0        // put 0 into eax
        pop     rbp           // retrieve rbp to the previous address before calling this function
        ret                   // return the value in eax

Q4:

add(int, int):
        lea     eax, [rdi+rsi]
        ret
.LC0:
        .string "%d"
main:
        sub     rsp, 8
        mov     esi, 4
        mov     edi, OFFSET FLAT:.LC0
        xor     eax, eax
        call    printf
        xor     eax, eax
        add     rsp, 8
        ret

Q5:

-O* means the levels of optimization. 
-O0 Reduce compilation time and make debugging produce the expected results. 
-O3 Optimize yet more. It tries to optimize code very heavily for performance.
For example, in -O3 add function, it directly put the added value in eax rather than assigned the value in separate register before adding.
