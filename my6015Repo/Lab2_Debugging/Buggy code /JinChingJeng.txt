Script started on Thu Jan 26 18:23:28 2023
]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging]2;jinny@Jinnys-MacBook-Pro]1;..ab2_Debugging]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[68C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:23:28[K[00m[39m[49m[82D[?1h=[?2004hccd Buggy\ code\ [1m/[0m[0m [?1l>[?2004l
]2;cd Buggy\ code\ ]1;cd[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:23:31[K[00m[39m[49m[70D[?1h=[?2004hcd Buggy\ code\ [16Dscript JinChingJeng.txt[23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dclang++ *.cpp  -o program                    [20D[?1l>[?2004l
]2;clang++ *.cpp -o program]1;clang++[1mDepartment.cpp:143:47: [0m[0;1;35mwarning: [0m[1mif statement has empty body [-Wempty-body][0m
                if (E.getID() == Programmers->at(i).getID());
[0;1;32m                                                            ^
[0m[1mDepartment.cpp:143:47: [0m[0;1;30mnote: [0mput the semicolon on a separate line to silence this warning[0m
[1mDepartment.cpp:162:10: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    for (i; i < Programmers->size(); i++)
[0;1;32m         ^
[0m[1mDepartment.cpp:170:10: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    for (i; i < SoftwareArchitects->size(); i++)
[0;1;32m         ^
[0m3 warnings generated.
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:23:46[K[00m[39m[49m[70D[?1h=[?2004hlls -l[?1l>[?2004l
]2;ls -G -l]1;lstotal 416
-rwxrwxrwx@ 1 jinny  staff    4064 Oct 11  2018 [31mDepartment.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    1486 Oct  8  2018 [31mDepartment.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     998 Oct 11  2018 [31memployeeClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     625 Oct 11  2018 [31memployeeClass.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    4996 Oct  8  2018 [31mmain.cpp[39;49m[0m
-rwxr-xr-x  1 jinny  staff  171876 Jan 26 18:23 [31mprogram[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     955 Mar 15  2018 [31mprogrammerClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     595 Mar 15  2018 [31mprogrammerClass.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    1072 Mar 15  2018 [31msoftwarearchitectClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     633 Mar 15  2018 [31msoftwarearchitectClass.h[39;49m[0m
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:23:52[K[00m[39m[49m[70D[?1h=[?2004hls -lclang++ *.cpp  -o program[25Dcd Buggy\ code\          [9D[16Dscript JinChingJeng.txt[23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dclang++ *.cpp  -o program                    [20D[25Dcd Buggy\ code\          [9D[16Dclang++ *.cpp  -o program[25Dscript JinChingJeng.txt  [23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dscript JinChingJeng.txt                      [22D[23Dclang++ *.cpp  -o program[25Dcd Buggy\ code\          [9D[16Dclang++ *.cpp  -o program[25Dscript JinChingJeng.txt  [23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dls -l                                        [40Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1mDepartment.cpp:143:47: [0m[0;1;35mwarning: [0m[1mif statement has empty body [-Wempty-body][0m
                if (E.getID() == Programmers->at(i).getID());
[0;1;32m                                                            ^
[0m[1mDepartment.cpp:143:47: [0m[0;1;30mnote: [0mput the semicolon on a separate line to silence this warning[0m
[1mDepartment.cpp:162:10: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    for (i; i < Programmers->size(); i++)
[0;1;32m         ^
[0m[1mDepartment.cpp:170:10: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    for (i; i < SoftwareArchitects->size(); i++)
[0;1;32m         ^
[0m3 warnings generated.
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:24:06[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dls -l               [2C          [27D[?1l>[?2004l
]2;ls -G -l]1;lstotal 672
-rwxrwxrwx@ 1 jinny  staff    4064 Oct 11  2018 [31mDepartment.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    1486 Oct  8  2018 [31mDepartment.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     998 Oct 11  2018 [31memployeeClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     625 Oct 11  2018 [31memployeeClass.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    4996 Oct  8  2018 [31mmain.cpp[39;49m[0m
-rwxr-xr-x  1 jinny  staff  302868 Jan 26 18:24 [31mprogram[39;49m[0m
drwxr-xr-x  3 jinny  staff      96 Jan 26 18:24 [1m[36mprogram.dSYM[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     955 Mar 15  2018 [31mprogrammerClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     595 Mar 15  2018 [31mprogrammerClass.h[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff    1072 Mar 15  2018 [31msoftwarearchitectClass.cpp[39;49m[0m
-rwxrwxrwx@ 1 jinny  staff     633 Mar 15  2018 [31msoftwarearchitectClass.h[39;49m[0m
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:24:10[K[00m[39m[49m[70D[?1h=[?2004h../program[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   0                           3000.00      2015

   Mary   0                           5500.00      2010

   Marc   0                           8000.00      2007

   Mike   0                           2500.00      2014

  Julie   0                           2150.00      2013

 Albert   0                           2300.00      2015

   John   0                           4899.00      2011

 Connor   0                           1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Mary   0                           5500.00      2010

  Julie   0                           2150.00      2013

 Connor   0                           1900.00      2017

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie   0                           2150.00      2013      Mary         5         C++

 Listing All Project IDs: 
-------------------------
The Highest R&D Employee Salary is: 5500.00
The Highest R&D Programmer Salary is: 2150.00
The Highest R&D Software Architect Salary is: 1900.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2150
The Average R&D Software Architect Salary is: 1900

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:24:44[K[00m[39m[49m[70D[?1h=[?2004hvvim Department.cpp[?1l>[?2004l
]2;vim Department.cpp]1;vim[?1049h[>4;2m[?1h=[?2004h[?1004h[1;45r[?12h[?12l[22;2t[22;1t[27m[29m[m[H[2J[?25l[45;1H"Department.cpp" [dos] 197L, 4064B[2;1H▽[6n[2;1H  [3;1HPzz\[0%m[6n[3;1H           [1;1H[>c]10;?]11;?[1;1H#include "Department.h"[2;1H[K[3;1H[K[5;1HDepartment::Department()
{[7;9HEmployees = new vector<Employee>();[8;9HProgrammers = new vector <Programmer>();[9;9HSoftwareArchitects = new vector<SoftwareArchitect>();[10;9HName = "";[11;9HID = 0;
}

Department::Department(string N, int id)
{[16;9HEmployees = new vector<Employee>();[17;9HProgrammers = new vector <Programmer>();[18;9HSoftwareArchitects = new vector<SoftwareArchitect>();[19;9HName = N;[20;9H(id > 0) ? ID = -1 : ID = id;
}

double Department::CalculateMaxSalary(StaffTypes type)
{[25;9Hdouble max = 0;[26;9Hdouble i = 0;[27;9Hswitch (type)[28;9H{[29;9Hcase Department::EMPLOYEE:[30;17Hfor (i = 0; i < Employees->size(); i++)[31;17H{[33;25Hif (Employees->at(i).getSalary()>max)[34;25H{[35;33Hmax = Employees->at(i).getSalary();[36;25H}[37;17H}[38;17Hbreak;[39;9Hcase Department::PROGRAMMER:[40;17Hfor (i = 0; i < Programmers->size(); i++)[41;17H{[43;25Hif (Programmers->at(i).getSalary()>max)[44;25H{[1;1H[?25h[?25l[45;1H[K[45;1H:[?25hset number[?25l[1;1H[38;5;130m  1 [m#include "Department.h"
[38;5;130m  2 
  3 
  4 
  5 [mDepartment::Department()
[38;5;130m  6 [m{
[38;5;130m  7 [m        Employees = new vector<Employee>();
[38;5;130m  8 [m        Programmers = new vector <Programmer>();
[38;5;130m  9 [m        SoftwareArchitects = new vector<SoftwareArchitect>();
[38;5;130m 10 [m        Name = "";
[38;5;130m 11 [m        ID = 0;
[38;5;130m 12 [m}
[38;5;130m 13 
 14 [mDepartment::Department(string N, int id)
[38;5;130m 15 [m{
[38;5;130m 16 [m        Employees = new vector<Employee>();
[38;5;130m 17 [m        Programmers = new vector <Programmer>();
[38;5;130m 18 [m        SoftwareArchitects = new vector<SoftwareArchitect>();
[38;5;130m 19 [m        Name = N;
[38;5;130m 20 [m        (id > 0) ? ID = -1 : ID = id;
[38;5;130m 21 [m}
[38;5;130m 22 
 23 [mdouble Department::CalculateMaxSalary(StaffTypes type)
[38;5;130m 24 [m{
[38;5;130m 25 [m        double max = 0;
[38;5;130m 26 [m        double i = 0;
[38;5;130m 27 [m        switch (type)
[38;5;130m 28 [m        {
[38;5;130m 29 [m        case Department::EMPLOYEE:
[38;5;130m 30 [m[12C    for (i = 0; i < Employees->size(); i++)
[38;5;130m 31 [m[12C    {
[38;5;130m 32 
 33 [m[20C    if (Employees->at(i).getSalary()>max)
[38;5;130m 34 [m[20C    {
[38;5;130m 35 [m[28C    max = Employees->at(i).getSalary();
[38;5;130m 36 [m[20C    }
[38;5;130m 37 [m[12C    }
[38;5;130m 38 [m[12C    break;
[38;5;130m 39 [m        case Department::PROGRAMMER:
[38;5;130m 40 [m[12C    for (i = 0; i < Programmers->size(); i++)
[38;5;130m 41 [m[12C    {
[38;5;130m 42 
 43 [m[20C    if (Programmers->at(i).getSalary()>max)
[38;5;130m 44 [m[20C    {[1;5H[?25h[2;5H[3;5H[4;5H[5;5H[?25l[6;5H[106m{[12;5H}[6;5H[?25h[?25l[m{[12;5H}[7;12H[?25h[8;12H[9;12H[10;12H[11;12H[?25l[6;5H[106m{[12;5H}[?25h[?25l[m[6;5H{[12;5H}[13;5H[?25h[14;5H[?25l[15;5H[106m{[21;5H}[15;5H[?25h[?25l[m{[21;5H}[16;12H[?25h[17;12H[18;12H[19;12H[20;12H[?25l[15;5H[106m{[21;5H}[?25h[?25l[m[15;5H{[21;5H}[22;5H[?25h[23;5H[24;5H[25;12H[26;12H[27;12H[28;12H[29;12H[30;12H[31;12H[32;5H[33;12H[34;12H[35;12H[36;12H[37;12H[38;12H[39;12H[40;12H[41;12H[42;5H[43;12H[44;12H[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 45 [m[32Cmax = Programmers->at(i).getSalary();[45;1H[K[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 46 [m[24C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 47 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 48 [m[8Cbreak;[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 49 [m[8Ccase Department::SOFTWAREARCHITECTS:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 50 [m[16Cfor (i = 0; i < SoftwareArchitects->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 51 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 52 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m 53 [m[24Cif (SoftwareArchitects->at(i).getSalary()>max)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 54 [m[24C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 55 [m[16Cmax = SoftwareArchitects->at(i).getSalary();[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 56 [m[24C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 57 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 58 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 59 [m[8Cdefault:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 60 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 61 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 62 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m 63 [m[8Creturn max;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[4;5H[106m{[m[44;1H[38;5;130m 64 [m[106m}[?25h[?25l[1;44r[m[44;1H
[1;45r[3;5H{[43;5H}
[38;5;130m 65 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m 66 [mint Department::CalculateAverageSalary(StaffTypes type)[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 67 [m{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 68 [m    double sum;[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 69 [m[8Csum = 0.0;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 70 [m[8Cint i;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 71 [m[8Cswitch (type)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 72 [m[8C{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 73 [m[8Ccase Department::EMPLOYEE:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 74 [m[16Cfor (i = 0; i < Employees->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 75 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 76 [m[24Csum += Employees->at(i).getSalary();[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 77 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 78 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 79 [m[8Ccase Department::PROGRAMMER:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 80 [m[16Cfor (i = 0; i < Programmers->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 81 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 82 [m[24Csum += Programmers->at(i).getSalary();[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 83 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 84 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 85 [m[8Ccase Department::SOFTWAREARCHITECTS:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 86 [m[16Cfor (i = 0; i < SoftwareArchitects->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 87 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 88 [m[24Csum += SoftwareArchitects->at(i).getSalary();[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 89 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 90 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 91 [m[8Cdefault:[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 92 [m[16Csum = -1;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 93 [m[16Cbreak;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 94 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m 95 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m 96 [m    return sum/i;[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[14;5H[106m{[m[44;1H[38;5;130m 97 [m[106m}[?25h[?25l[1;44r[m[44;1H
[1;45r[13;5H{[43;5H}
[38;5;130m 98 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m 99 [mvector<Employee*> *Department::getAllStaff()[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m100 [m{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m101 [m    vector<Employee*> *Result = new vector<Employee*>();[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m102 [m[8Cfor (int i = 0; i < Employees->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m103 [m    {[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m104 [m[8CResult->push_back(&Employees->at(i));[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m105 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m106 [m    for (int i = 0; i < Programmers->size(); i++)[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m107 [m    {[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m108 [m[8CResult->push_back(&Programmers->at(i));[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m109 [m    }[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m110 [m[8Cfor (int i = 0; i < SoftwareArchitects->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m111 [m    {[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m112 [m[8CResult->push_back(&SoftwareArchitects->at(i));[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m113 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m114 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m115 [m[8Creturn Result;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[28;5H[106m{[m[44;1H[38;5;130m116 [m[106m}[?25h[?25l[1;44r[m[44;1H
[1;45r[27;5H{[43;5H}
[38;5;130m117 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m118 [mvector<Programmer> *Department::getProgrammersByLanguage(string Lang)[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m119 [m{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m120 [m    vector<Programmer> *result = new vector<Programmer>();[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m121 [m[8Cfor (int i = 0; i < Programmers->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m122 [m[8C{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m123 [m[16CProgrammer temp = Programmers->at(i);[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m124 [m[8Cif (temp.getProgLanguage() == Lang)[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m125 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m126 [m[24Cresult->push_back(temp);[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m127 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m128 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m129 [m[8Creturn result;[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[33;5H[106m{[m[44;1H[38;5;130m130 [m[106m}[?25h[?25l[1;44r[m[44;1H
[1;45r[32;5H{[43;5H}
[38;5;130m131 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m132 [mbool Department::RemoveEmployee(Employee E)[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m133 [m{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m134 [m[8Cfor (int i = 0; i < Employees->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m135 [m[8C{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m136 [m[8Cif (E.getID() == Employees->at(i).getID())[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m137 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m138 [m[24CEmployees->erase(Employees->begin() + i);[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m139 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m140 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m141 [m[8Cfor (int i = 0; i <  Programmers->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m142 [m[8C{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m143 [m[16Cif (E.getID() == Programmers->at(i).getID());[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m144 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m145 [m[24CProgrammers->erase(Programmers->begin() + i);[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m146 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m147 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m148 [m[8Cfor (int i = 0; i < SoftwareArchitects->size(); i++)[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m149 [m[8C{[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m150 [m[16Cif (E.getID() == SoftwareArchitects->at(i).getID())[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m151 [m[16C{[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m152 [m[24CSoftwareArchitects->erase(SoftwareArchitects->begin() + i);[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m153 [m[16C}[44;12H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m154 [m[8C}[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m155 [m    return true;[44;5H[?25h[?25l[1;44r[44;1H
[1;45r[21;5H[106m{[m[44;1H[38;5;130m156 [m[106m}[?25h[?25l[m[21;5H{[44;5H}[43;5H[?25h[42;12H[41;12H[40;12H[39;12H[38;12H[37;12H[36;12H[35;12H[34;12H[33;12H[32;12H[31;12H[30;12H[31;12H[?25l[45;1H[1m-- INSERT --[31;5H[?25h[8C[8C[mif[?25l [106m([39C)[31;24H[?25h[?25l([?25h[?25l[m([39C)[31;26H[?25h.getI[?25lD[106m()[?25h[?25l([?25h[?25l)[?25h[?25l[m() [?25h== Programmers->a[?25lt[106m([mi[106m)[?25h[?25l([?25h[?25l[mi[?25h[?25l[1C[?25h[?25l(i).[?25hgetI[?25lD[106m()[?25h[?25l([?25h[?25l[31;24H([m[37C()[106m)[?25h[?25l)[?25h[?25l[m[31;24H([39C);[?25h[?25l[31;24H[106m([39C)[m[31;65H[K[31;65H[?25h[?25l[31;24H([39C)[32;21H[106m{[34;21H}[32;22H[?25h[?25l[m{[34;21H}[33;65H[?25h[?25l[30;13H[106m{[35;13H}[?25h[?25l[m[30;13H{[35;13H}[37;13H[106m{[42;13H}[37;14H[?25h[?25l[m{[39;21H[106m{[41;21H}[m[42;13H}[39;22H[?25h[?25l[41;22H[?25h[?25l[37;13H[106m{[m[39;21H{[41;21H}[42;13H[106m}[?25h[?25l[21;5H{[m[37;13H{[42;13H}[44;5H[106m}[?25h[?25l[1;44r[m[1;1H[2M[1;45r[19;5H{[42;5H}
[38;5;130m157 
158 [mvector<int>* Department::getAllProjectIDs[106m()[?25h[?25l[1;44r[m[44;1H
[1;45r[43;46H()
[38;5;130m159 [m{[1;44r[1;1H[4M[1;45r[41;1H[38;5;130m160 [m[8Cvector<int> *result = new vector<int>();
[38;5;130m161 [m    int i;
[38;5;130m162 [m    for (i; i < Programmers->size(); i++)
[38;5;130m163 [m[8C{[?25h[?25l[43;13H[106m([31C)[?25h[?25l[?25h[?25l[m[43;13H([31C)[?25h[?25l[106m()[?25h[?25l[?25h[?25l[?25h[?25l[m()[?25h[?25l ; i < Programmers->size(); i++)[43;16H[?25h[?25l=; i < Programmers->size(); i++)[43;17H[?25h[?25l ; i < Programmers->size(); i++)[43;18H[?25h[?25l0; i < Programmers->size(); i++)[43;19H[?25h[44;14H[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m164 [m[16Cif (!checkID(Programmers->at(i).getID(), result))[44;13H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m165 [m[16C{[44;13H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m166 [m[12Cresult->push_back(Programmers->at(i).getProjectID());[44;19H[?25h[?25l[1;44r[44;1H
[1;45r[44;1H[38;5;130m167 [m[16C}[44;13H[?25h[?25l[1;44r[44;1H
[1;45r[39;13H[106m{[m[44;1H[38;5;130m168 [m[8C[106m}[?25h[?25l[1;44r[m[44;1H
[1;45r[38;13H{[43;13H}
[38;5;130m169 [?25h[?25l[1;44r[m[44;1H
[1;45r[44;1H[38;5;130m170 [m    for (i; i < SoftwareArchitects->size(); i++)[44;19H[?25h[?25l[106m([38C)[44;14H[?25h[?25l[m([38C)[44;15H[?25h[?25l ; i < SoftwareArchitects->size(); i++)[44;16H[?25h[?25l=; i < SoftwareArchitects->size(); i++)[44;17H[?25h[?25l ; i < SoftwareArchitects->size(); i++)[44;18H[?25h[?25l0; i < SoftwareArchitects->size(); i++)[44;19H[?25h; i < Softw[45;1H[K[44;29H[?25l[?25h[?25l
:[?25hwq[?25l[?2004l[>4;m"Department.cpp" [dos] 197L, 4071B written[23;2t[23;1t
[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 06:55[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 18:32:29[K[00m[39m[49m[70D[?1h=[?2004hb bb print[?1l>[?2004l
]2;b print]1;bzsh: command not found: b
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[52C[39m[0m[49m[31m[39m[41m[38;5;226m 127[38;5;226m ↵ [39m[37m[39m[47m[30m 19:58:12[K[00m[39m[49m[70D[?1h=[?2004hb printvim Department.cpp[18D./program         [9D[9Dls -l    clang++ -g -O0 *.cpp  -o program[32Dls -l               [2C          [27Dclang++ *.cpp  -o program[25Dcd Buggy\ code\          [9D[16Dscript JinChingJeng.txt[23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dclang++ *.cpp  -o program                    [20D[25Dcd Buggy\ code\          [9D[16Dclang++ *.cpp  -o program[25Dscript JinChingJeng.txt  [23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging[45Dls -l                                        [40Dclang++ -g -O0 *.cpp  -o program[24D*.cpp  -o program       [25Dscript JinChingJeng.txt  [23Dcd MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy\ code\[K[1C[59D./program[K[43C[39m[0m[49m[31m[39m[41m[38;5;226m 127[38;5;226m ↵ [39m[37m[39m[47m[30m 19:58:12[K[00m[39m[49m[61D[9Dclang++ -g -O0 *.cpp -o program[31D./program                      [22D[9Dclang++ -g -O0 *.cpp -o program[31D./program                      [22D[9Dclang++ -g -O0 *.cpp -o program[31Dlldb program                   [19D[12D./program   [9Dlldb program[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb print
Breakpoint 1: 5 locations.
(lldb) [1G[2m(lldb) [0m[8Grun
Process 76646 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x0000000100404080) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfr v
(Employee *) this = 0x0000000100404080
(lldb) [1G[2m(lldb) [0m[8Gfar[K[1G[2m(lldb) [0m[10G[K[1G[2m(lldb) [0m[9Gr v var
error: no variable or instance variable named 'var' found in this frame
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008ba0[0m program`Employee::getName(this=0x0000000100404080) const at [36memployeeClass.cpp[0m:[33m27[0m:[33m9[0m
[33m  [0m 24  	
[33m  [0m 25  	[35m/* Accessor Functions */[0m
[33m  [0m 26  	string Employee::getName() [32mconst[0m {
[33m->[0m 27  		[32mreturn[0m [4mname[0m;
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008bac[0m program`Employee::getName(this=0x00000001e03dd730) const at [36memployeeClass.cpp[0m:[33m27[0m:[33m2[0m
[33m  [0m 24  	
[33m  [0m 25  	[35m/* Accessor Functions */[0m
[33m  [0m 26  	string Employee::getName() [32mconst[0m {
[33m->[0m 27  		[32m[4mreturn[0m[0m name;
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008c84[0m program`Employee::print(this=0x0000000100404080) at [36memployeeClass.cpp[0m:[33m48[0m:[33m21[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << setw([31m7[0m) << [4mgetName[0m()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008c9c[0m program`Employee::print(this=0x0000000100404080) at [36memployeeClass.cpp[0m:[33m49[0m:[33m6[0m
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m  [0m 48  		cout << setw([31m7[0m) << getName()
[33m->[0m 49  			<< [4msetw[0m([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
[33m  [0m 52  			<< setw([31m10[0m) << getHireYear()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76646 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008bbc[0m program`Employee::getID(this=0x0000000100404080) const at [36memployeeClass.cpp[0m:[33m31[0m:[33m9[0m
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
[33m->[0m 31  		[32mreturn[0m [4mID[0m;
[33m  [0m 32  	}
[33m  [0m 33  	
[33m  [0m 34  	string Employee::getJobTitle() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs[K[1G[2m(lldb) [0m[8Gb getID
Breakpoint 2: where = program`Employee::getID() const + 12 at employeeClass.cpp:31:9, address = 0x0000000100008bbc
(lldb) [1G[2m(lldb) [0m[8Grun
There is a running process, kill it and restart?: [Y/n] y
Process 76646 exited with status = 9 (0x00000009) 
Process 76654 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

Process 76654 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x0000000100304290) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 76654 resuming
Process 76654 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.1[0m
    frame #0: [33m0x0000000100008bbc[0m program`Employee::getID(this=0x0000000100304290) const at [36memployeeClass.cpp[0m:[33m31[0m:[33m9[0m
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
[33m->[0m 31  		[32mreturn[0m [4mID[0m;
[33m  [0m 32  	}
[33m  [0m 33  	
[33m  [0m 34  	string Employee::getJobTitle() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gr[K[1G[2m(lldb) [0m[8Gfr[K[1G[2m(lldb) [0m[9G[K[1G[2m(lldb) [0m[8Gbt
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.1[0m
  * frame #0: [33m0x0000000100008bbc[0m program`Employee::getID(this=0x0000000100304290) const at [36memployeeClass.cpp[0m:[33m31[0m:[33m9[0m
    frame #1: [33m0x0000000100008ccc[0m program`Employee::print(this=0x0000000100304290) at [36memployeeClass.cpp[0m:[33m49[0m:[33m17[0m
    frame #2: [33m0x000000010000a724[0m program`main at [36mmain.cpp[0m:[33m59[0m:[33m34[0m
    frame #3: [33m0x000000010005108c[0m dyld`start + 520
(lldb) [1G[2m(lldb) [0m[8Gb Employee
Breakpoint 3: 6 locations.
(lldb) [1G[2m(lldb) [0m[8Gb [1G[2m(lldb) [0m[9Gr del 1 2
2 breakpoints deleted; 0 breakpoint locations disabled.
(lldb) [1G[2m(lldb) [0m[8Grun
There is a running process, kill it and restart?: [Y/n] y
Process 76654 exited with status = 9 (0x00000009) 
Process 76664 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
Process 76664 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 3.5[0m
    frame #0: [33m0x0000000100008b58[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m13[0m:[33m79[0m
[33m  [0m 10  	}
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m->[0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) [4m{[0m
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id > [31m0[0m) ? ID = [31m0[0m : ID = id;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76664 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 3.4[0m
    frame #0: [33m0x00000001000089e0[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m13[0m:[33m11[0m
[33m  [0m 10  	}
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m->[0m 13  	Employee::[4mEmployee[0m(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id > [31m0[0m) ? ID = [31m0[0m : ID = id;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76664 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a14[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m14[0m:[33m7[0m
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m  [0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m->[0m 14  		name [4m=[0m nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id > [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfr v
(Employee *) this = 0x000000016fdff4d0
(std::string) nme = "Josh"
(long) id = 1
(std::string) jobTitle = "Technology Specialist"
(double) slry = 3000
(int) yr = 2015
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76664 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a1c[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m16[0m:[33m6[0m
[33m  [0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m->[0m 16  	    ([4mid[0m > [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
[33m  [0m 18  		jobTitle = jobTitle;
[33m  [0m 19  	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76664 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a4c[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m18[0m:[33m11[0m
[33m  [0m 15  	
[33m  [0m 16  	    (id > [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
[33m->[0m 18  		jobTitle [4m=[0m jobTitle;
[33m  [0m 19  	
[33m  [0m 20  		(slry > [31m0[0m) ? salary = slry : salary = [31m0.00[0m;
[33m  [0m 21  		(yr > [31m0[0m) ? HireYear = yr : HireYear = [31m2018[0m;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs[K[1G[2m(lldb) [0m[8Gs[1G[2m(lldb) [0m[9Gfr v[1G[2m(lldb) [0m[12G
(Employee *) this = 0x000000016fdff4d0
(std::string) nme = "Josh"
(long) id = 1
(std::string) jobTitle = "Technology Specialist"
(double) slry = 3000
(int) yr = 2015
(lldb) [1G[2m(lldb) [0m[8Gfr this->ID
[0;1;31merror: [0mcommand 'frame' did not recognize 'this- >ID' as valid (subcommand might be invalid).
(lldb) [1G[2m(lldb) [0m[8Gfr this->ID[1G[2m(lldb) [0m[19G[1@vt[1G[2m(lldb) [0m[12G[1@ t[1G[2m(lldb) [0m[13G
(long) this->ID = 0
(lldb) [1G[2m(lldb) [0m[8Gv[K[1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 05:52[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:04:20[K[00m[39m[49m[70D[?1h=[?2004hlldb program[12Db print     vim Department.cpp[18D./program         [9D[9Dls -l    clang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:04:26[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12Db print     vim Department.cpp[18D./program         [9D[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1                           3000.00      2015

   Mary   2                           5500.00      2010

   Marc   3                           8000.00      2007

   Mike  11                           2500.00      2014

  Julie  12                           2150.00      2013

 Albert  13                           2300.00      2015

   John  21                           4899.00      2011

 Connor  24                           1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1                           3000.00      2015

   Mary   2                           5500.00      2010

   Marc   3                           8000.00      2007

  Julie  12                           2150.00      2013

 Albert  13                           2300.00      2015

   John  21                           4899.00      2011

 Connor  24                           1900.00      2017

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12                           2150.00      2013      Mary         5         C++

 Albert  13                           2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:04:34[K[00m[39m[49m[70D[?1h=[?2004hb v ./program[9Dclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb print
Breakpoint 1: 5 locations.
(lldb) [1G[2m(lldb) [0m[8Grun
Process 76946 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x0000000100304290) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gb[K[1G[2m(lldb) [0m[8Gs[K[1G[2m(lldb) [0m[8Gc
Process 76946 resuming
   Josh   1                           3000.00      2015

Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x00000001003042f8) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 76946 resuming
   Mary   2                           5500.00      2010

Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x0000000100304360) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008ba0[0m program`Employee::getName(this=0x0000000100304360) const at [36memployeeClass.cpp[0m:[33m27[0m:[33m9[0m
[33m  [0m 24  	
[33m  [0m 25  	[35m/* Accessor Functions */[0m
[33m  [0m 26  	string Employee::getName() [32mconst[0m {
[33m->[0m 27  		[32mreturn[0m [4mname[0m;
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008bac[0m program`Employee::getName(this=0x00000001e03dd730) const at [36memployeeClass.cpp[0m:[33m27[0m:[33m2[0m
[33m  [0m 24  	
[33m  [0m 25  	[35m/* Accessor Functions */[0m
[33m  [0m 26  	string Employee::getName() [32mconst[0m {
[33m->[0m 27  		[32m[4mreturn[0m[0m name;
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008c84[0m program`Employee::print(this=0x0000000100304360) at [36memployeeClass.cpp[0m:[33m48[0m:[33m21[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << setw([31m7[0m) << [4mgetName[0m()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008c9c[0m program`Employee::print(this=0x0000000100304360) at [36memployeeClass.cpp[0m:[33m49[0m:[33m6[0m
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m  [0m 48  		cout << setw([31m7[0m) << getName()
[33m->[0m 49  			<< [4msetw[0m([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
[33m  [0m 52  			<< setw([31m10[0m) << getHireYear()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008bbc[0m program`Employee::getID(this=0x0000000100304360) const at [36memployeeClass.cpp[0m:[33m31[0m:[33m9[0m
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
[33m->[0m 31  		[32mreturn[0m [4mID[0m;
[33m  [0m 32  	}
[33m  [0m 33  	
[33m  [0m 34  	string Employee::getJobTitle() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008ccc[0m program`Employee::print(this=0x0000000100304360) at [36memployeeClass.cpp[0m:[33m49[0m:[33m17[0m
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m  [0m 48  		cout << setw([31m7[0m) << getName()
[33m->[0m 49  			<< setw([31m4[0m) << [4mgetID[0m()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
[33m  [0m 52  			<< setw([31m10[0m) << getHireYear()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008ce4[0m program`Employee::print(this=0x0000000100304360) at [36memployeeClass.cpp[0m:[33m50[0m:[33m6[0m
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m  [0m 48  		cout << setw([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m->[0m 50  			<< [4msetw[0m([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
[33m  [0m 52  			<< setw([31m10[0m) << getHireYear()
[33m  [0m 53  				  << "\n";
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76946 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008bf0[0m program`Employee::getJobTitle(this=0x0000000100304360) const at [36memployeeClass.cpp[0m:[33m35[0m:[33m9[0m
[33m  [0m 32  	}
[33m  [0m 33  	
[33m  [0m 34  	string Employee::getJobTitle() [32mconst[0m {
[33m->[0m 35  		[32mreturn[0m [4mjobTitle[0m;
[33m  [0m 36  	}
[33m  [0m 37  	
[33m  [0m 38  	[32mdouble[0m Employee::getSalary() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gb Employee
Breakpoint 2: 6 locations.
(lldb) [1G[2m(lldb) [0m[8Grun
There is a running process, kill it and restart?: [Y/n] y
Process 76946 exited with status = 9 (0x00000009) 
Process 76950 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
Process 76950 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.5[0m
    frame #0: [33m0x0000000100008b58[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m13[0m:[33m79[0m
[33m  [0m 10  	}
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m->[0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) [4m{[0m
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id < [31m0[0m) ? ID = [31m0[0m : ID = id;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76950 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.4[0m
    frame #0: [33m0x00000001000089e0[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m13[0m:[33m11[0m
[33m  [0m 10  	}
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m->[0m 13  	Employee::[4mEmployee[0m(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id < [31m0[0m) ? ID = [31m0[0m : ID = id;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76950 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a14[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m14[0m:[33m7[0m
[33m  [0m 11  	
[33m  [0m 12  	[35m/* Constructor w/ parameters */[0m
[33m  [0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m->[0m 14  		name [4m=[0m nme;
[33m  [0m 15  	
[33m  [0m 16  	    (id < [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76950 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a1c[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m16[0m:[33m6[0m
[33m  [0m 13  	Employee::Employee(string nme, [32mlong[0m id, string jobTitle, [32mdouble[0m slry, [32mint[0m yr) {
[33m  [0m 14  		name = nme;
[33m  [0m 15  	
[33m->[0m 16  	    ([4mid[0m < [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
[33m  [0m 18  		jobTitle = jobTitle;
[33m  [0m 19  	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 76950 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100008a4c[0m program`Employee::Employee(this=0x000000016fdff4d0, nme="Josh", id=1, jobTitle="Technology Specialist", slry=3000, yr=2015) at [36memployeeClass.cpp[0m:[33m18[0m:[33m11[0m
[33m  [0m 15  	
[33m  [0m 16  	    (id < [31m0[0m) ? ID = [31m0[0m : ID = id;
[33m  [0m 17  	
[33m->[0m 18  		jobTitle [4m=[0m jobTitle;
[33m  [0m 19  	
[33m  [0m 20  		(slry > [31m0[0m) ? salary = slry : salary = [31m0.00[0m;
[33m  [0m 21  		(yr > [31m0[0m) ? HireYear = yr : HireYear = [31m2018[0m;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfar[K[1G[2m(lldb) [0m[10G[K[1G[2m(lldb) [0m[9Gr v
(Employee *) this = 0x000000016fdff4d0
(std::string) nme = "Josh"
(long) id = 1
(std::string) jobTitle = "Technology Specialist"
(double) slry = 3000
(int) yr = 2015
(lldb) [1G[2m(lldb) [0m[8Gfr v this-<[K[1G[2m(lldb) [0m[18G>jobTitle [1G[2m(lldb) [0m[28G
(std::string) this->jobTitle = ""
(lldb) [1G[2m(lldb) [0m[8G
[JAvailable completions:
	_regexp-attach    -- Attach to process by ID or name.
	_regexp-break     -- Set a breakpoint using one of several shorthand formats.
	_regexp-bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.
	_regexp-display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)
	_regexp-down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	_regexp-env       -- Shorthand for viewing and setting environment variables.
	_regexp-jump      -- Set the program counter to a new address.
	_regexp-list      -- List relevant source code using one of several shorthand formats.
	_regexp-tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.
	_regexp-undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)
	_regexp-up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	apropos           -- List debugger commands related to a word or subject.
	breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)
	command           -- Commands for managing custom LLDB commands.
	disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	frame             -- Commands for selecting and examing the current thread's stack frames.
	gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.
	gui               -- Switch into the curses based GUI mode.
	help              -- Show a list of all debugger commands, or give details about a specific command.
	kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.
	language          -- Commands specific to a source language.
	log               -- Commands controlling LLDB internal logging.
	memory            -- Commands for operating on memory in the current target process.
	platform          -- Commands to manage and create platforms.
	plugin            -- Commands for managing LLDB plugins.
	process           -- Commands for interacting with processes on the current platform.
	quit              -- Quit the LLDB debugger.
	register          -- Commands to access registers for the current thread and stack frame.
	reproducer        -- Commands for manipulating reproducers. Reproducers make it possible to capture full debug sessions with all its dependencies. The resulting reproducer is used to replay the debug session while debugging the debugger.
Because reproducers need the whole the debug session from beginning to end, you need to launch the debugger in capture or replay mode, commonly though the command line driver.
Reproducers are unrelated record-replay debugging, as you cannot interact with the debugger during replay.

	script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.
	session           -- Commands controlling LLDB session.
	settings          -- Commands for managing LLDB settings.
	source            -- Commands for examining source code described by debug information for the current target process.
	statistics        -- Print statistics about a debugging session
	swift-healthcheck -- Show the LLDB debugger health check diagnostics.
	target            -- Commands for operating on debugger targets.
	thread            -- Commands for operating on one or more threads in the current process.
	trace             -- Commands for loading and using processor trace information.
	type              -- Commands for operating on the type system.
More (Y/n/a): 
	version           -- Show the LLDB debugger version.
	watchpoint        -- Commands for operating on watchpoints.
	add-dsym          -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file or by using the options to specify a module.
	attach            -- Attach to process by ID or name.
	b                 -- Set a breakpoint using one of several shorthand formats.
	bt                -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.
	c                 -- Continue execution of all threads in the current process.
	call              -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	continue          -- Continue execution of all threads in the current process.
	detach            -- Detach from the current target process.
	di                -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	dis               -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	display           -- Evaluate an expression at every stop (see 'help target stop-hook'.)
	down              -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	env               -- Shorthand for viewing and setting environment variables.
	exit              -- Quit the LLDB debugger.
	f                 -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)
	file              -- Create a target using the argument as the main executable.
	finish            -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.
	history           -- Dump the history of commands in this session.
Commands in the history list can be run again using "!<INDEX>".   "!-<OFFSET>" will re-run the command that is <OFFSET> commands from the end of the list (counting the current command).
	image             -- Commands for accessing information for one or more target modules.
	j                 -- Set the program counter to a new address.
	jump              -- Set the program counter to a new address.
	kill              -- Terminate the current target process.
	l                 -- List relevant source code using one of several shorthand formats.
	list              -- List relevant source code using one of several shorthand formats.
	n                 -- Source level single step, stepping over calls.  Defaults to current thread unless specified.
	next              -- Source level single step, stepping over calls.  Defaults to current thread unless specified.
	nexti             -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.
	ni                -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.
	p                 -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	parray            -- parray <COUNT> <EXPRESSION> -- lldb will evaluate EXPRESSION to get a typed-pointer-to-an-array in memory, and will display COUNT elements of that type from the array.
	po                -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.
	poarray           -- poarray <COUNT> <EXPRESSION> -- lldb will evaluate EXPRESSION to get the address of an array of COUNT objects in memory, and will call po on them.
	print             -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	q                 -- Quit the LLDB debugger.
	r                 -- Launch the executable in the debugger.
	rbreak            -- Sets a breakpoint or set of breakpoints in the executable.
	re                -- Commands to access registers for the current thread and stack frame.
	repl              -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
More (Y/n/a): 
	run               -- Launch the executable in the debugger.
	s                 -- Source level single step, stepping into calls.  Defaults to current thread unless specified.
	shell             -- Run a shell command on the host.
	si                -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.
	sif               -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.
	step              -- Source level single step, stepping into calls.  Defaults to current thread unless specified.
	stepi             -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.
	t                 -- Change the currently selected thread.
	tbreak            -- Set a one-shot breakpoint using one of several shorthand formats.
	undisplay         -- Stop displaying expression at every stop (specified by stop-hook index.)
	up                -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	v                 -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	var               -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	vo                -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	x                 -- Read from the memory of the current target process.
[1G[J[2m(lldb) [0m [8G[K(lldb) [1G[2m(lldb) [0m[8Gw[K[1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 03:01[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:07:50[K[00m[39m[49m[70D[?1h=[?2004hlldb program[12D./program   [9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:07:54[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12D./program   [?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:07:57[K[00m[39m[49m[70D[?1h=[?2004hs ./program[9Dclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb print
Breakpoint 1: 5 locations.
(lldb) [1G[2m(lldb) [0m[8Grun
Process 77236 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

Process 77236 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100008c54[0m program`Employee::print(this=0x0000000100304290) at [36memployeeClass.cpp[0m:[33m48[0m:[33m10[0m
[33m  [0m 45  	}
[33m  [0m 46  	
[33m  [0m 47  	[32mvoid[0m Employee::print() {
[33m->[0m 48  		cout << [4msetw[0m([31m7[0m) << getName()
[33m  [0m 49  			<< setw([31m4[0m) << getID()
[33m  [0m 50  			<< setw([31m24[0m) << getJobTitle()
[33m  [0m 51  			<< setw([31m10[0m) << setprecision([31m2[0m) << fixed << getSalary()
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gf[K[1G[2m(lldb) [0m[8Gv[K[1G[2m(lldb) [0m[8G
[JAvailable completions:
	_regexp-attach    -- Attach to process by ID or name.
	_regexp-break     -- Set a breakpoint using one of several shorthand formats.
	_regexp-bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.
	_regexp-display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)
	_regexp-down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	_regexp-env       -- Shorthand for viewing and setting environment variables.
	_regexp-jump      -- Set the program counter to a new address.
	_regexp-list      -- List relevant source code using one of several shorthand formats.
	_regexp-tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.
	_regexp-undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)
	_regexp-up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	apropos           -- List debugger commands related to a word or subject.
	breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)
	command           -- Commands for managing custom LLDB commands.
	disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	frame             -- Commands for selecting and examing the current thread's stack frames.
	gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.
	gui               -- Switch into the curses based GUI mode.
	help              -- Show a list of all debugger commands, or give details about a specific command.
	kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.
	language          -- Commands specific to a source language.
	log               -- Commands controlling LLDB internal logging.
	memory            -- Commands for operating on memory in the current target process.
	platform          -- Commands to manage and create platforms.
	plugin            -- Commands for managing LLDB plugins.
	process           -- Commands for interacting with processes on the current platform.
	quit              -- Quit the LLDB debugger.
	register          -- Commands to access registers for the current thread and stack frame.
	reproducer        -- Commands for manipulating reproducers. Reproducers make it possible to capture full debug sessions with all its dependencies. The resulting reproducer is used to replay the debug session while debugging the debugger.
Because reproducers need the whole the debug session from beginning to end, you need to launch the debugger in capture or replay mode, commonly though the command line driver.
Reproducers are unrelated record-replay debugging, as you cannot interact with the debugger during replay.

	script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.
	session           -- Commands controlling LLDB session.
	settings          -- Commands for managing LLDB settings.
	source            -- Commands for examining source code described by debug information for the current target process.
	statistics        -- Print statistics about a debugging session
	swift-healthcheck -- Show the LLDB debugger health check diagnostics.
	target            -- Commands for operating on debugger targets.
	thread            -- Commands for operating on one or more threads in the current process.
	trace             -- Commands for loading and using processor trace information.
	type              -- Commands for operating on the type system.
More (Y/n/a): 
	version           -- Show the LLDB debugger version.
	watchpoint        -- Commands for operating on watchpoints.
	add-dsym          -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file or by using the options to specify a module.
	attach            -- Attach to process by ID or name.
	b                 -- Set a breakpoint using one of several shorthand formats.
	bt                -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.
	c                 -- Continue execution of all threads in the current process.
	call              -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	continue          -- Continue execution of all threads in the current process.
	detach            -- Detach from the current target process.
	di                -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	dis               -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.
	display           -- Evaluate an expression at every stop (see 'help target stop-hook'.)
	down              -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	env               -- Shorthand for viewing and setting environment variables.
	exit              -- Quit the LLDB debugger.
	f                 -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)
	file              -- Create a target using the argument as the main executable.
	finish            -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.
	history           -- Dump the history of commands in this session.
Commands in the history list can be run again using "!<INDEX>".   "!-<OFFSET>" will re-run the command that is <OFFSET> commands from the end of the list (counting the current command).
	image             -- Commands for accessing information for one or more target modules.
	j                 -- Set the program counter to a new address.
	jump              -- Set the program counter to a new address.
	kill              -- Terminate the current target process.
	l                 -- List relevant source code using one of several shorthand formats.
	list              -- List relevant source code using one of several shorthand formats.
	n                 -- Source level single step, stepping over calls.  Defaults to current thread unless specified.
	next              -- Source level single step, stepping over calls.  Defaults to current thread unless specified.
	nexti             -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.
	ni                -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.
	p                 -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	parray            -- parray <COUNT> <EXPRESSION> -- lldb will evaluate EXPRESSION to get a typed-pointer-to-an-array in memory, and will display COUNT elements of that type from the array.
	po                -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.
	poarray           -- poarray <COUNT> <EXPRESSION> -- lldb will evaluate EXPRESSION to get the address of an array of COUNT objects in memory, and will call po on them.
	print             -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
	q                 -- Quit the LLDB debugger.
	r                 -- Launch the executable in the debugger.
	rbreak            -- Sets a breakpoint or set of breakpoints in the executable.
	re                -- Commands to access registers for the current thread and stack frame.
	repl              -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.
More (Y/n/a): 
	run               -- Launch the executable in the debugger.
	s                 -- Source level single step, stepping into calls.  Defaults to current thread unless specified.
	shell             -- Run a shell command on the host.
	si                -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.
	sif               -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.
	step              -- Source level single step, stepping into calls.  Defaults to current thread unless specified.
	stepi             -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.
	t                 -- Change the currently selected thread.
	tbreak            -- Set a one-shot breakpoint using one of several shorthand formats.
	undisplay         -- Stop displaying expression at every stop (specified by stop-hook index.)
	up                -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.
	v                 -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	var               -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	vo                -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as 'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable instead.
It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.
	x                 -- Read from the memory of the current target process.
[1G[J[2m(lldb) [0m [8G[K(lldb) [1G[2m(lldb) [0m[8Gf[K[1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 02:31[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:10:39[K[00m[39m[49m[70D[?1h=[?2004hv ccat e Employee.cpp[?1l>[?2004l
]2;cat Employee.cpp]1;catcat: Employee.cpp: No such file or directory
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[54C[39m[0m[49m[31m[39m[41m[38;5;226m 1[38;5;226m ↵ [39m[37m[39m[47m[30m 20:10:53[K[00m[39m[49m[70D[?1h=[?2004hccat employeeClass.cpp[?1l>[?2004l
]2;cat employeeClass.cpp]1;cat#include "employeeClass.h"

/* Default constructor */
Employee::Employee() {
	name = "";
	ID = 0.00;
	jobTitle = "";
    salary = 0.00;
	HireYear = 2018;
}

/* Constructor w/ parameters */
Employee::Employee(string nme, long id, string jobTitle, double slry, int yr) {
	name = nme;

    (id < 0) ? ID = 0 : ID = id;

	this->jobTitle = jobTitle;

	(slry > 0) ? salary = slry : salary = 0.00;
	(yr > 0) ? HireYear = yr : HireYear = 2018;

}

/* Accessor Functions */
string Employee::getName() const {
	return name;
}

long Employee::getID() const {
	return ID;
}

string Employee::getJobTitle() const {
	return jobTitle;
}

double Employee::getSalary() const {
	return salary;
}

int Employee::getHireYear() const
{
	return HireYear;
}

void Employee::print() {
	cout << setw(7) << getName()
		<< setw(4) << getID()
		<< setw(24) << getJobTitle()
		<< setw(10) << setprecision(2) << fixed << getSalary()
		<< setw(10) << getHireYear()
			  << "\n";
}
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:11:02[K[00m[39m[49m[70D[?1h=[?2004hccat pro   main.cpp[?1l>[?2004l
]2;cat main.cpp]1;cat#include "Department.h"
#include "employeeClass.h"
#include "programmerClass.h"
#include "softwarearchitectClass.h"
#include <vector>
#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

//function used to print table header before the vector printing
void printHeader();

int main() 
{
	Department RnD("Research and Development", 1);
	Department IT("Info And Tech", 2);
	//creating new Employees
	Employee E1("Josh", 1, "Technology Specialist", 3000, 2015);
	Employee E2("Mary", 2, "Project Manager", 5500, 2010);
	Employee E3("Marc", 3, "Research Team Leader", 8000, 2007);
	//adding the employees to the appropriate vector
	RnD.Employees->push_back(E1);
	RnD.Employees->push_back(E2);
	RnD.Employees->push_back(E3);

	Programmer P1("Mike", 11, "Multimedia Prog.", 2500, 2014, E2.getName(), 5, "CSS");
	Programmer P2("Julie", 12, "Mainframe Sys.Prog.", 2150, 2013, E2.getName(), 5, "C++");
	Programmer P3("Albert", 13, "OS Prog.", 2300, 2015, E2.getName(), 9, "C++");
 
	RnD.Programmers->push_back(P1);
	RnD.Programmers->push_back(P2);
	RnD.Programmers->push_back(P3);

	SoftwareArchitect SA1("John",21, "Senior Software Eng.", 4899, 2011, E3.getName(), 6, 7);
	SoftwareArchitect SA2("Connor",24, "Software Developer", 1900, 2017, SA1.getName(), 8, 0);

	RnD.SoftwareArchitects->push_back(SA1);
	RnD.SoftwareArchitects->push_back(SA2);

	Programmer P4("Roy", 32, "Network Prog.", 1900 , 2016,"N/A", 7, "JAVA");
	Programmer P5("Jane", 35, "Tester", 1500, 2018, P4.getName(), 7, "JAVA");

	
	IT.Programmers->push_back(P4);
	IT.Programmers->push_back(P5);

	cout << "  Here is the List of all the Staff in the R&D Department: \n";
	cout << "  ------------------------------------------------------------\n";
	printHeader();
	//a Employee Vector that holds all types of staff
    vector<Employee*> *AllRnDEmployees1 = RnD.getAllStaff();

    for (unsigned i = 0; i < AllRnDEmployees1->size(); i++)
	{
		cout << "\n";
		//using Base Class Pointers to Call the print function if each Type
        AllRnDEmployees1->at(i)->print();
	}

	cout << "  Here is the List of all the Staff in the IT Department: \n";
	cout << "  ------------------------------------------------------------\n";
	printHeader();
	//a Employee Vector that holds all types of staff
    vector<Employee*> *AllITEmployees = IT.getAllStaff();
    for (unsigned i; i < AllITEmployees->size(); i++)
	{
		cout << "\n";
		//using Base Class Pointers to Call the print function if each Type
        AllITEmployees->at(i)->print();
	}

	cout << "\n Removing Mike from the company: ";
	cout << (RnD.RemoveEmployee(P1) ? "Succeeded\n" : "Failed\n");
	cout << " -------------------------------\n";	
	
	printHeader();
    vector<Employee*> *AllRnDEmployees2 = RnD.getAllStaff();
    //AllRnDEmployees = RnD.getAllStaff();
    for (unsigned i=0; i < AllRnDEmployees2->size(); i++)
	{
		cout << "\n";
        AllRnDEmployees2->at(i)->print();
	}

	cout << "\n  Here is the List of all the Programmers who know C++ in the R&D Department: \n";
	cout << "  ---------------------------------------------------------------------------\n";
	printHeader();
	vector<Programmer> *CppProgrammers = RnD.getProgrammersByLanguage("C++");
    for (unsigned i=0; i < CppProgrammers->size(); i++)
	{
		cout << "\n";
		CppProgrammers->at(i).print();
	}

	cout << "\n Listing All Project IDs: ";
	vector<int> *AllProjects = RnD.getAllProjectIDs();
    for (unsigned i=0; i < AllProjects->size(); i++)
	{
		cout <<" "<<AllProjects->at(i);
	}
	cout << "\n-------------------------\n";

	
	cout << "The Highest R&D Employee Salary is: " << RnD.CalculateMaxSalary(RnD.EMPLOYEE) << endl;
	cout << "The Highest R&D Programmer Salary is: " << RnD.CalculateMaxSalary(RnD.PROGRAMMER) << endl;
	cout << "The Highest R&D Software Architect Salary is: " << RnD.CalculateMaxSalary(RnD.SOFTWAREARCHITECTS) << endl;
	cout << "\n";
	cout << "The Average R&D Employee Salary is: " << RnD.CalculateAverageSalary(RnD.EMPLOYEE) << endl;
	cout << "The Average R&D Programmer Salary is: " << RnD.CalculateAverageSalary(RnD.PROGRAMMER) << endl;
	cout << "The Average R&D Software Architect Salary is: " << RnD.CalculateAverageSalary(RnD.SOFTWAREARCHITECTS) << endl;
	cout << "\n";
	cout << "The Average IT Employee Salary is: " << IT.CalculateAverageSalary(IT.EMPLOYEE) << endl;
	cout << "The Average IT Programmer Salary is: " << IT.CalculateAverageSalary(IT.PROGRAMMER) << endl;
	cout << "The Average IT Software Architect Salary is: " << IT.CalculateAverageSalary(IT.SOFTWAREARCHITECTS) << endl;

	return 0;
}

void printHeader()
{
	cout << setw(7) << "Name"
		<< setw(4) << "ID"
		<< setw(15) << "Title"
		<< setw(18) << setprecision(2) << fixed << "Salary"
		<< setw(13) << "Year Hired"
		<< setw(12) << "Supervisor"
		<< setw(11) << "ProjectID"
		<< setw(11) << "Prog.Lang."
		<< setw(11) << "#Exp Years"
		<< "\n";

}
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:11:25[K[00m[39m[49m[70D[?1h=[?2004hccat program
[J[1;32mprogram[0m*              [J[1;31mprogram.dSYM[0m/         [J[1;32mprogrammerClass.cpp[0m*  [J[1;32mprogrammerClass.h[0m*  [J[A[0m[27m[24m[0m[39m[49m[85Ccat program[K[45C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:11:25[K[00m[39m[49m[0m[39m[49m[59D.cpp[?1l>[?2004l
[J]2;cat program.cpp]1;catcat: program.cpp: No such file or directory
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[54C[39m[0m[49m[31m[39m[41m[38;5;226m 1[38;5;226m ↵ [39m[37m[39m[47m[30m 20:11:37[K[00m[39m[49m[70D[?1h=[?2004hcat program.cppe.cpp.cpp m.cppe.cppr.cppC.cppl.cppa.cpps.cpps.cpp[?1l>[?2004l
]2;cat programmerClass.cpp]1;cat#include "programmerClass.h"

Programmer::Programmer() {
	supervisorName = "";
	ProjectID = 0;
	Language = "";

}

Programmer::Programmer(string nme, long id, string jobTtle, double slry, int yr, string superName, int projctid, string PrgLang)

					   : Employee(nme, id, jobTtle, slry, yr) {

	supervisorName = superName;

	(projctid > 0) ? ProjectID = projctid : ProjectID = 0;
	
	Language = PrgLang;
}

/* Accessor Functions */


string Programmer::getSupervisorName() const {
	return supervisorName;
}

int Programmer::getProjectID() const {
	return ProjectID;
}

string Programmer::getProgLanguage() const
{
	return Language;
}

void Programmer::print()
{
	cout << setw(7) << getName()
		<< setw(4) << getID()
		<< setw(24) << getJobTitle()
		<< setw(10) << setprecision(2) << fixed << getSalary()
		<< setw(10) << getHireYear()
		<< setw(10) << getSupervisorName()
		<< setw(10) << getProjectID()
		<< setw(12) << getProgLanguage()
		<< "\n";
}



[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:11:46[K[00m[39m[49m[70D[?1h=[?2004hf cat programmerClass.cpp[12D.cpp        [8D[11Dmain.cpp   [8DemployeeClass.cpp[17DE[7C.cpp     [16Dlldb program    [12D./program   [9Dlldb program[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb main.cpp:66
Breakpoint 1: where = program`main + 3468 at main.cpp:66:44, address = 0x000000010000acf8
(lldb) [1G[2m(lldb) [0m[8Grun
Process 77752 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x000000010000acf8[0m program`main at [36mmain.cpp[0m:[33m66[0m:[33m44[0m
[33m  [0m 63  		cout << "  ------------------------------------------------------------\n";
[33m  [0m 64  		printHeader();
[33m  [0m 65  		[35m//a Employee Vector that holds all types of staff[0m
[33m->[0m 66  	    vector<Employee*> *AllITEmployees = IT.[4mgetAllStaff[0m();
[33m  [0m 67  	    [32mfor[0m ([32munsigned[0m i; i < AllITEmployees->size(); i++)
[33m  [0m 68  		{
[33m  [0m 69  			cout << "\n";
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100001028[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m101[0m:[33m33[0m
[33m  [0m 98  	
[33m  [0m 99  	vector<Employee*> *Department::getAllStaff()
[33m  [0m 100 	{
[33m->[0m 101 	    vector<Employee*> *Result = [32m[4mnew[0m[0m vector<Employee*>();
[33m  [0m 102 		[32mfor[0m ([32mint[0m i = [31m0[0m; i < Employees->size(); i++)
[33m  [0m 103 	    {
[33m  [0m 104 	        Result->push_back(&Employees->at(i));
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100001040[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m102[0m:[33m11[0m
[33m  [0m 99  	vector<Employee*> *Department::getAllStaff()
[33m  [0m 100 	{
[33m  [0m 101 	    vector<Employee*> *Result = [32mnew[0m vector<Employee*>();
[33m->[0m 102 		[32mfor[0m ([32mint[0m [4mi[0m = [31m0[0m; i < Employees->size(); i++)
[33m  [0m 103 	    {
[33m  [0m 104 	        Result->push_back(&Employees->at(i));
[33m  [0m 105 		}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x00000001000010c8[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m106[0m:[33m14[0m
[33m  [0m 103 	    {
[33m  [0m 104 	        Result->push_back(&Employees->at(i));
[33m  [0m 105 		}
[33m->[0m 106 	    [32mfor[0m ([32mint[0m [4mi[0m = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 107 	    {
[33m  [0m 108 	        Result->push_back(&Programmers->at(i));
[33m  [0m 109 	    }
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x00000001000010f8[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m108[0m:[33m9[0m
[33m  [0m 105 		}
[33m  [0m 106 	    [32mfor[0m ([32mint[0m i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 107 	    {
[33m->[0m 108 	        [4mResult[0m->push_back(&Programmers->at(i));
[33m  [0m 109 	    }
[33m  [0m 110 		[32mfor[0m ([32mint[0m i = [31m0[0m; i < SoftwareArchitects->size(); i++)
[33m  [0m 111 	    {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100001120[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m109[0m:[33m5[0m
[33m  [0m 106 	    [32mfor[0m ([32mint[0m i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 107 	    {
[33m  [0m 108 	        Result->push_back(&Programmers->at(i));
[33m->[0m 109 	    [4m}[0m
[33m  [0m 110 		[32mfor[0m ([32mint[0m i = [31m0[0m; i < SoftwareArchitects->size(); i++)
[33m  [0m 111 	    {
[33m  [0m 112 	        Result->push_back(&SoftwareArchitects->at(i));
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77752 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100001124[0m program`Department::getAllStaff(this=0x000000016fdff550) at [36mDepartment.cpp[0m:[33m106[0m:[33m47[0m
[33m  [0m 103 	    {
[33m  [0m 104 	        Result->push_back(&Employees->at(i));
[33m  [0m 105 		}
[33m->[0m 106 	    [32mfor[0m ([32mint[0m i = [31m0[0m; i < Programmers->size(); i[4m++[0m)
[33m  [0m 107 	    {
[33m  [0m 108 	        Result->push_back(&Programmers->at(i));
[33m  [0m 109 	    }
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 77752 resuming

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
Process 77752 exited with status = 0 (0x00000000) 
(lldb) [1G[2m(lldb) [0m[8Grun
Process 77757 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x000000010000acf8[0m program`main at [36mmain.cpp[0m:[33m66[0m:[33m44[0m
[33m  [0m 63  		cout << "  ------------------------------------------------------------\n";
[33m  [0m 64  		printHeader();
[33m  [0m 65  		[35m//a Employee Vector that holds all types of staff[0m
[33m->[0m 66  	    vector<Employee*> *AllITEmployees = IT.[4mgetAllStaff[0m();
[33m  [0m 67  	    [32mfor[0m ([32munsigned[0m i; i < AllITEmployees->size(); i++)
[33m  [0m 68  		{
[33m  [0m 69  			cout << "\n";
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000ad10[0m program`main at [36mmain.cpp[0m:[33m67[0m:[33m10[0m
[33m  [0m 64  		printHeader();
[33m  [0m 65  		[35m//a Employee Vector that holds all types of staff[0m
[33m  [0m 66  	    vector<Employee*> *AllITEmployees = IT.getAllStaff();
[33m->[0m 67  	    [32mfor[0m ([32m[4munsigned[0m[0m i; i < AllITEmployees->size(); i++)
[33m  [0m 68  		{
[33m  [0m 69  			cout << "\n";
[33m  [0m 70  			[35m//using Base Class Pointers to Call the print function if each Type[0m
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000ad98[0m program`main at [36mmain.cpp[0m:[33m74[0m:[33m7[0m
[33m  [0m 71  	        AllITEmployees->at(i)->print();
[33m  [0m 72  		}
[33m  [0m 73  	
[33m->[0m 74  		cout [4m<<[0m "\n Removing Mike from the company: ";
[33m  [0m 75  		cout << (RnD.RemoveEmployee(P1) ? "Succeeded\n" : "Failed\n");
[33m  [0m 76  		cout << " -------------------------------\n";	
[33m  [0m 77  		
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs

Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000ada8[0m program`main at [36mmain.cpp[0m:[33m75[0m:[33m30[0m
[33m  [0m 72  		}
[33m  [0m 73  	
[33m  [0m 74  		cout << "\n Removing Mike from the company: ";
[33m->[0m 75  		cout << (RnD.RemoveEmployee([4mP1[0m) ? "Succeeded\n" : "Failed\n");
[33m  [0m 76  		cout << " -------------------------------\n";	
[33m  [0m 77  		
[33m  [0m 78  		printHeader();
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000b8e0[0m program`Employee::Employee(this=0x000000016fdfec48, (null)=0x000000016fdff2d0) at [36memployeeClass.h[0m:[33m10[0m:[33m7[0m
[33m  [0m 7   	
[33m  [0m 8   	[32musing[0m [32mnamespace[0m std;
[33m  [0m 9   	
[33m->[0m 10  	[32mclass[0m [4mEmployee[0m {
[33m  [0m 11  		string name;
[33m  [0m 12  		[32mint[0m age;
[33m  [0m 13  		[32mchar[0m gender;
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000adac[0m program`main at [36mmain.cpp[0m:[33m75[0m:[33m30[0m
[33m  [0m 72  		}
[33m  [0m 73  	
[33m  [0m 74  		cout << "\n Removing Mike from the company: ";
[33m->[0m 75  		cout << (RnD.RemoveEmployee([4mP1[0m) ? "Succeeded\n" : "Failed\n");
[33m  [0m 76  		cout << " -------------------------------\n";	
[33m  [0m 77  		
[33m  [0m 78  		printHeader();
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
 Removing Mike from the company: Succeeded
Process 77757 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000ae04[0m program`main at [36mmain.cpp[0m:[33m76[0m:[33m7[0m
[33m  [0m 73  	
[33m  [0m 74  		cout << "\n Removing Mike from the company: ";
[33m  [0m 75  		cout << (RnD.RemoveEmployee(P1) ? "Succeeded\n" : "Failed\n");
[33m->[0m 76  		cout [4m<<[0m " -------------------------------\n";	
[33m  [0m 77  		
[33m  [0m 78  		printHeader();
[33m  [0m 79  	    vector<Employee*> *AllRnDEmployees2 = RnD.getAllStaff();
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 02:18[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:15:05[K[00m[39m[49m[70D[?1h=[?2004hlldb program[12Dcat programmerClass.cpp[12D.cpp        [8D[11Dmain.cpp   [8DemployeeClass.cpp[17DE[7C.cpp     [16Dlldb program    [12D./program   [9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:15:11[K[00m[39m[49m[70D[?1h=[?2004h../program[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016

   Jane  35                  Tester   1500.00      2018

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013

 Albert  13                OS Prog.   2300.00      2015

   John  21    Senior Software Eng.   4899.00      2011

 Connor  24      Software Developer   1900.00      2017

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:15:15[K[00m[39m[49m[70D[?1h=[?2004h./program[9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++^[[A[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:16:18[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program                        c  ../program[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:16:28[K[00m[39m[49m[70D[?1h=[?2004hccat main.cpp[?1l>[?2004l
]2;cat main.cpp]1;cat#include "Department.h"
#include "employeeClass.h"
#include "programmerClass.h"
#include "softwarearchitectClass.h"
#include <vector>
#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

//function used to print table header before the vector printing
void printHeader();

int main() 
{
	Department RnD("Research and Development", 1);
	Department IT("Info And Tech", 2);
	//creating new Employees
	Employee E1("Josh", 1, "Technology Specialist", 3000, 2015);
	Employee E2("Mary", 2, "Project Manager", 5500, 2010);
	Employee E3("Marc", 3, "Research Team Leader", 8000, 2007);
	//adding the employees to the appropriate vector
	RnD.Employees->push_back(E1);
	RnD.Employees->push_back(E2);
	RnD.Employees->push_back(E3);

	Programmer P1("Mike", 11, "Multimedia Prog.", 2500, 2014, E2.getName(), 5, "CSS");
	Programmer P2("Julie", 12, "Mainframe Sys.Prog.", 2150, 2013, E2.getName(), 5, "C++");
	Programmer P3("Albert", 13, "OS Prog.", 2300, 2015, E2.getName(), 9, "C++");
 
	RnD.Programmers->push_back(P1);
	RnD.Programmers->push_back(P2);
	RnD.Programmers->push_back(P3);

	SoftwareArchitect SA1("John",21, "Senior Software Eng.", 4899, 2011, E3.getName(), 6, 7);
	SoftwareArchitect SA2("Connor",24, "Software Developer", 1900, 2017, SA1.getName(), 8, 0);

	RnD.SoftwareArchitects->push_back(SA1);
	RnD.SoftwareArchitects->push_back(SA2);

	Programmer P4("Roy", 32, "Network Prog.", 1900 , 2016,"N/A", 7, "JAVA");
	Programmer P5("Jane", 35, "Tester", 1500, 2018, P4.getName(), 7, "JAVA");

	
	IT.Programmers->push_back(P4);
	IT.Programmers->push_back(P5);

	cout << "  Here is the List of all the Staff in the R&D Department: \n";
	cout << "  ------------------------------------------------------------\n";
	printHeader();
	//a Employee Vector that holds all types of staff
    vector<Employee*> *AllRnDEmployees1 = RnD.getAllStaff();

    for (unsigned i = 0; i < AllRnDEmployees1->size(); i++)
	{
		cout << "\n";
		//using Base Class Pointers to Call the print function if each Type
        AllRnDEmployees1->at(i)->print();
	}

	cout << "  Here is the List of all the Staff in the IT Department: \n";
	cout << "  ------------------------------------------------------------\n";
	printHeader();
	//a Employee Vector that holds all types of staff
    vector<Employee*> *AllITEmployees = IT.getAllStaff();
    for (unsigned i = 0; i < AllITEmployees->size(); i++)
	{
		cout << "\n";
		//using Base Class Pointers to Call the print function if each Type
        AllITEmployees->at(i)->print();
	}

	cout << "\n Removing Mike from the company: ";
	cout << (RnD.RemoveEmployee(P1) ? "Succeeded\n" : "Failed\n");
	cout << " -------------------------------\n";	
	
	printHeader();
    vector<Employee*> *AllRnDEmployees2 = RnD.getAllStaff();
    //AllRnDEmployees = RnD.getAllStaff();
    for (unsigned i=0; i < AllRnDEmployees2->size(); i++)
	{
		cout << "\n";
        AllRnDEmployees2->at(i)->print();
	}

	cout << "\n  Here is the List of all the Programmers who know C++ in the R&D Department: \n";
	cout << "  ---------------------------------------------------------------------------\n";
	printHeader();
	vector<Programmer> *CppProgrammers = RnD.getProgrammersByLanguage("C++");
    for (unsigned i=0; i < CppProgrammers->size(); i++)
	{
		cout << "\n";
		CppProgrammers->at(i).print();
	}

	cout << "\n Listing All Project IDs: ";
	vector<int> *AllProjects = RnD.getAllProjectIDs();
    for (unsigned i=0; i < AllProjects->size(); i++)
	{
		cout <<" "<<AllProjects->at(i);
	}
	cout << "\n-------------------------\n";

	
	cout << "The Highest R&D Employee Salary is: " << RnD.CalculateMaxSalary(RnD.EMPLOYEE) << endl;
	cout << "The Highest R&D Programmer Salary is: " << RnD.CalculateMaxSalary(RnD.PROGRAMMER) << endl;
	cout << "The Highest R&D Software Architect Salary is: " << RnD.CalculateMaxSalary(RnD.SOFTWAREARCHITECTS) << endl;
	cout << "\n";
	cout << "The Average R&D Employee Salary is: " << RnD.CalculateAverageSalary(RnD.EMPLOYEE) << endl;
	cout << "The Average R&D Programmer Salary is: " << RnD.CalculateAverageSalary(RnD.PROGRAMMER) << endl;
	cout << "The Average R&D Software Architect Salary is: " << RnD.CalculateAverageSalary(RnD.SOFTWAREARCHITECTS) << endl;
	cout << "\n";
	cout << "The Average IT Employee Salary is: " << IT.CalculateAverageSalary(IT.EMPLOYEE) << endl;
	cout << "The Average IT Programmer Salary is: " << IT.CalculateAverageSalary(IT.PROGRAMMER) << endl;
	cout << "The Average IT Software Architect Salary is: " << IT.CalculateAverageSalary(IT.SOFTWAREARCHITECTS) << endl;

	return 0;
}

void printHeader()
{
	cout << setw(7) << "Name"
		<< setw(4) << "ID"
		<< setw(15) << "Title"
		<< setw(18) << setprecision(2) << fixed << "Salary"
		<< setw(13) << "Year Hired"
		<< setw(12) << "Supervisor"
		<< setw(11) << "ProjectID"
		<< setw(11) << "Prog.Lang."
		<< setw(11) << "#Exp Years"
		<< "\n";

}
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:17:00[K[00m[39m[49m[70D[?1h=[?2004h: cat main.cpp[12D./program   [9Dclang++ -g -O0 *.cpp  -o program[32D./program           [2C          [23D[9Dclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12Dcat programmerClass.cpp[23Dlldb program           [11D[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb *AllRnDEmployees2
Breakpoint 1: no locations (pending).
WARNING:  Unable to resolve breakpoint to any actual locations.
(lldb) [1G[2m(lldb) [0m[8Grun
Process 78294 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
Process 78294 exited with status = 0 (0x00000000) 
(lldb) [1G[2m(lldb) [0m[8Gb main.cpp:97
Breakpoint 2: where = program`main + 4232 at main.cpp:97:7, address = 0x000000010000ef08
(lldb) [1G[2m(lldb) [0m[8Grun
Process 78300 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.1[0m
    frame #0: [33m0x000000010000ef08[0m program`main at [36mmain.cpp[0m:[33m97[0m:[33m7[0m
[33m  [0m 94  			CppProgrammers->at(i).print();
[33m  [0m 95  		}
[33m  [0m 96  	
[33m->[0m 97  		cout [4m<<[0m "\n Listing All Project IDs: ";
[33m  [0m 98  		vector<[32mint[0m> *AllProjects = RnD.getAllProjectIDs();
[33m  [0m 99  	    [32mfor[0m ([32munsigned[0m i=[31m0[0m; i < AllProjects->size(); i++)
[33m  [0m 100 		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs

Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000ef14[0m program`main at [36mmain.cpp[0m:[33m98[0m:[33m33[0m
[33m  [0m 95  		}
[33m  [0m 96  	
[33m  [0m 97  		cout << "\n Listing All Project IDs: ";
[33m->[0m 98  		vector<[32mint[0m> *AllProjects = RnD.[4mgetAllProjectIDs[0m();
[33m  [0m 99  	    [32mfor[0m ([32munsigned[0m i=[31m0[0m; i < AllProjects->size(); i++)
[33m  [0m 100 		{
[33m  [0m 101 			cout <<" "<<AllProjects->at(i);
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100005b24[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m160[0m:[33m24[0m
[33m  [0m 157 	
[33m  [0m 158 	vector<[32mint[0m>* Department::getAllProjectIDs()
[33m  [0m 159 	{
[33m->[0m 160 		vector<[32mint[0m> *result = [32m[4mnew[0m[0m vector<[32mint[0m>();
[33m  [0m 161 	    [32mint[0m i;
[33m  [0m 162 	    [32mfor[0m (i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 163 		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100005b3c[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m162[0m:[33m12[0m
[33m  [0m 159 	{
[33m  [0m 160 		vector<[32mint[0m> *result = [32mnew[0m vector<[32mint[0m>();
[33m  [0m 161 	    [32mint[0m i;
[33m->[0m 162 	    [32mfor[0m (i [4m=[0m [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 163 		{
[33m  [0m 164 			[32mif[0m (!checkID(Programmers->at(i).getID(), result))
[33m  [0m 165 			{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100005b6c[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m164[0m:[33m16[0m
[33m  [0m 161 	    [32mint[0m i;
[33m  [0m 162 	    [32mfor[0m (i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 163 		{
[33m->[0m 164 			[32mif[0m (!checkID([4mProgrammers[0m->at(i).getID(), result))
[33m  [0m 165 			{
[33m  [0m 166 	            result->push_back(Programmers->at(i).getProjectID());
[33m  [0m 167 			}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000cad0[0m program`Employee::getID(this=0x0000000100304720) const at [36memployeeClass.cpp[0m:[33m31[0m:[33m9[0m
[33m  [0m 28  	}
[33m  [0m 29  	
[33m  [0m 30  	[32mlong[0m Employee::getID() [32mconst[0m {
[33m->[0m 31  		[32mreturn[0m [4mID[0m;
[33m  [0m 32  	}
[33m  [0m 33  	
[33m  [0m 34  	string Employee::getJobTitle() [32mconst[0m {
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x0000000100005b7c[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m164[0m:[33m35[0m
[33m  [0m 161 	    [32mint[0m i;
[33m  [0m 162 	    [32mfor[0m (i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 163 		{
[33m->[0m 164 			[32mif[0m (!checkID(Programmers->at(i).[4mgetID[0m(), result))
[33m  [0m 165 			{
[33m  [0m 166 	            result->push_back(Programmers->at(i).getProjectID());
[33m  [0m 167 			}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x0000000100005b9c[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m166[0m:[33m13[0m
[33m  [0m 163 		{
[33m  [0m 164 			[32mif[0m (!checkID(Programmers->at(i).getID(), result))
[33m  [0m 165 			{
[33m->[0m 166 	            [4mresult[0m->push_back(Programmers->at(i).getProjectID());
[33m  [0m 167 			}
[33m  [0m 168 		}
[33m  [0m 169 	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x0000000100005bc8[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m167[0m:[33m3[0m
[33m  [0m 164 			[32mif[0m (!checkID(Programmers->at(i).getID(), result))
[33m  [0m 165 			{
[33m  [0m 166 	            result->push_back(Programmers->at(i).getProjectID());
[33m->[0m 167 			[4m}[0m
[33m  [0m 168 		}
[33m  [0m 169 	
[33m  [0m 170 	    [32mfor[0m (i = [31m0[0m; i < SoftwareArchitects->size(); i++)
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x0000000100005be8[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m168[0m:[33m2[0m
[33m  [0m 165 			{
[33m  [0m 166 	            result->push_back(Programmers->at(i).getProjectID());
[33m  [0m 167 			}
[33m->[0m 168 		[4m}[0m
[33m  [0m 169 	
[33m  [0m 170 	    [32mfor[0m (i = [31m0[0m; i < SoftwareArchitects->size(); i++)
[33m  [0m 171 		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x0000000100005bec[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m162[0m:[33m43[0m
[33m  [0m 159 	{
[33m  [0m 160 		vector<[32mint[0m> *result = [32mnew[0m vector<[32mint[0m>();
[33m  [0m 161 	    [32mint[0m i;
[33m->[0m 162 	    [32mfor[0m (i = [31m0[0m; i < Programmers->size(); i[4m++[0m)
[33m  [0m 163 		{
[33m  [0m 164 			[32mif[0m (!checkID(Programmers->at(i).getID(), result))
[33m  [0m 165 			{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78300 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x0000000100005b6c[0m program`Department::getAllProjectIDs(this=0x000000016fdff5b0) at [36mDepartment.cpp[0m:[33m164[0m:[33m16[0m
[33m  [0m 161 	    [32mint[0m i;
[33m  [0m 162 	    [32mfor[0m (i = [31m0[0m; i < Programmers->size(); i++)
[33m  [0m 163 		{
[33m->[0m 164 			[32mif[0m (!checkID([4mProgrammers[0m->at(i).getID(), result))
[33m  [0m 165 			{
[33m  [0m 166 	            result->push_back(Programmers->at(i).getProjectID());
[33m  [0m 167 			}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gd[K[1G[2m(lldb) [0m[8Gc
Process 78300 resuming
 Listing All Project IDs:  5 9 6 8
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
Process 78300 exited with status = 0 (0x00000000) 
(lldb) [1G[2m(lldb) [0m[8Grun
Process 78304 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++
Process 78304 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.1[0m
    frame #0: [33m0x000000010000ef08[0m program`main at [36mmain.cpp[0m:[33m97[0m:[33m7[0m
[33m  [0m 94  			CppProgrammers->at(i).print();
[33m  [0m 95  		}
[33m  [0m 96  	
[33m->[0m 97  		cout [4m<<[0m "\n Listing All Project IDs: ";
[33m  [0m 98  		vector<[32mint[0m> *AllProjects = RnD.getAllProjectIDs();
[33m  [0m 99  	    [32mfor[0m ([32munsigned[0m i=[31m0[0m; i < AllProjects->size(); i++)
[33m  [0m 100 		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn

Process 78304 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000ef14[0m program`main at [36mmain.cpp[0m:[33m98[0m:[33m33[0m
[33m  [0m 95  		}
[33m  [0m 96  	
[33m  [0m 97  		cout << "\n Listing All Project IDs: ";
[33m->[0m 98  		vector<[32mint[0m> *AllProjects = RnD.[4mgetAllProjectIDs[0m();
[33m  [0m 99  	    [32mfor[0m ([32munsigned[0m i=[31m0[0m; i < AllProjects->size(); i++)
[33m  [0m 100 		{
[33m  [0m 101 			cout <<" "<<AllProjects->at(i);
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 78304 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000ef28[0m program`main at [36mmain.cpp[0m:[33m99[0m:[33m19[0m
[33m  [0m 96  	
[33m  [0m 97  		cout << "\n Listing All Project IDs: ";
[33m  [0m 98  		vector<[32mint[0m> *AllProjects = RnD.getAllProjectIDs();
[33m->[0m 99  	    [32mfor[0m ([32munsigned[0m [4mi[0m=[31m0[0m; i < AllProjects->size(); i++)
[33m  [0m 100 		{
[33m  [0m 101 			cout <<" "<<AllProjects->at(i);
[33m  [0m 102 		}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gf[K[1G[2m(lldb) [0m[8Gfr b[K[1G[2m(lldb) [0m[11Gv
(Department) RnD = {
  Name = "Research and Development"
  ID = -1
  Employees = 0x00006000002011a0 size=3
  Programmers = 0x00006000002011c0 size=2
  SoftwareArchitects = 0x00006000002011e0 size=2
}
(Department) IT = {
  Name = "Info And Tech"
  ID = -1
  Employees = 0x0000600000201180 size=0
  Programmers = 0x0000600000201200 size=2
  SoftwareArchitects = 0x0000600000201220 size=0
}
(Employee) E1 = (name = "Josh", age = 530816, gender = '\x01', ID = 1, phoneNumber = "", jobTitle = "Technology Specialist", salary = 3000, HireYear = 2015)
(Employee) E2 = (name = "Mary", age = 0, gender = '\0', ID = 2, phoneNumber = "", jobTitle = "Project Manager", salary = 5500, HireYear = 2010)
(Employee) E3 = (name = "Marc", age = 721136, gender = '\x06', ID = 3, phoneNumber = "", jobTitle = "Research Team Leader", salary = 8000, HireYear = 2007)
(Programmer) P1 = {
  Employee = (name = "Mike", age = -2026180608, gender = '\x01', ID = 11, phoneNumber = "", jobTitle = "Multimedia Prog.", salary = 2500, HireYear = 2014)
  supervisorName = "Mary"
  ProjectID = 5
  Language = "CSS"
}
(Programmer) P2 = {
  Employee = (name = "Julie", age = 0, gender = '\0', ID = 12, phoneNumber = "", jobTitle = "Mainframe Sys.Prog.", salary = 2150, HireYear = 2013)
  supervisorName = "Mary"
  ProjectID = 5
  Language = "C++"
}
(Programmer) P3 = {
  Employee = (name = "Albert", age = 0, gender = '\0', ID = 13, phoneNumber = "", jobTitle = "OS Prog.", salary = 2300, HireYear = 2015)
  supervisorName = "Mary"
  ProjectID = 9
  Language = "C++"
}
(SoftwareArchitect) SA1 = {
  Employee = (name = "John", age = 0, gender = '\0', ID = 21, phoneNumber = "", jobTitle = "Senior Software Eng.", salary = 4899, HireYear = 2011)
  supervisorName = "Marc"
  ProjectID = 6
  experienceYears = 7
}
(SoftwareArchitect) SA2 = {
  Employee = (name = "Connor", age = 0, gender = '\0', ID = 24, phoneNumber = "", jobTitle = "Software Developer", salary = 1900, HireYear = 2017)
  supervisorName = "John"
  ProjectID = 8
  experienceYears = 0
}
(Programmer) P4 = {
  Employee = (name = "Roy", age = 1098470144, gender = '\x02', ID = 32, phoneNumber = "", jobTitle = "Network Prog.", salary = 1900, HireYear = 2016)
  supervisorName = "N/A"
  ProjectID = 7
  Language = "JAVA"
}
(Programmer) P5 = {
  Employee = (name = "Jane", age = 1098487664, gender = '\x02', ID = 35, phoneNumber = "", jobTitle = "Tester", salary = 1500, HireYear = 2018)
  supervisorName = "Roy"
  ProjectID = 7
  Language = "JAVA"
}
(std::vector<Employee *, std::allocator<Employee *> > *) AllRnDEmployees1 = 0x0000600000201240 size=8
(std::vector<Employee *, std::allocator<Employee *> > *) AllITEmployees = 0x0000600000201280 size=2
(std::vector<Employee *, std::allocator<Employee *> > *) AllRnDEmployees2 = 0x00006000002012a0 size=7
(std::vector<Programmer, std::allocator<Programmer> > *) CppProgrammers = 0x00006000002012c0 size=2
(std::vector<int, std::allocator<int> > *) AllProjects = 0x0000600000208000 size=4
(unsigned int) i = 1
(lldb) [1G[2m(lldb) [0m[8Gfrb[K[1G[2m(lldb) [0m[10G b *a[K[1G[2m(lldb) [0m[14GA[K[1G[2m(lldb) [0m[14G[K[1G[2m(lldb) [0m[13Ga[K[1G[2m(lldb) [0m[13G[1G[2m(lldb) [0m[12G[K[1G[2m(lldb) [0m[11Gv *A[K(lldb) fr v *All[1G[2m(lldb) [0m[17G
[JAvailable completions:
	*AllRnDEmployees1
	*AllITEmployees  
	*AllRnDEmployees2
	*AllProjects     
[1G[J[2m(lldb) [0m [17G[K(lldb) fr v *All[1G[2m(lldb) [0m[17GProjects [1G[2m(lldb) [0m[26G
(std::vector<int, std::allocator<int> >) *AllProjects = size=4 {
  [0] = 5
  [1] = 9
  [2] = 6
  [3] = 8
}
(lldb) [1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 04:28[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:22:14[K[00m[39m[49m[70D[?1h=[?2004hlldb program[12Dcat main.cpp[12D./program   [9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:22:18[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12Dcat main.cpp[12D./program   [?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500
The Average R&D Programmer Salary is: 2225
The Average R&D Software Architect Salary is: 3399

The Average IT Employee Salary is: 0
The Average IT Programmer Salary is: 1700
The Average IT Software Architect Salary is: 0
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:22:21[K[00m[39m[49m[70D[?1h=[?2004h./program > check.txt[?1l>[?2004l
]2;./program > check.txt]1;./program[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:22:35[K[00m[39m[49m[70D[?1h=[?2004h./program > check.txt[11D           [12D[9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:26:14[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32D./program > check.txt           [11D[11D           [12D[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500.00
The Average R&D Programmer Salary is: 2225.00
The Average R&D Software Architect Salary is: 3399.50

The Average IT Employee Salary is: nan
The Average IT Programmer Salary is: 1700.00
The Average IT Software Architect Salary is: nan
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:26:18[K[00m[39m[49m[70D[?1h=[?2004h./program[9Dclang++ -g -O0 *.cpp  -o program[32D./program           [2C          [23D[9D         [9D./program[9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:30:59[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32D./program           [2C          [23D[?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500.00
The Average R&D Programmer Salary is: 2225.00
The Average R&D Software Architect Salary is: 3399.50

The Average IT Employee Salary is: nan
The Average IT Programmer Salary is: 1700.00
The Average IT Software Architect Salary is: nan
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:31:01[K[00m[39m[49m[70D[?1h=[?2004h./program[9Dclang++ -g -O0 *.cpp  -o program[32D./program           [2C          [23D[9Dclang++ -g -O0 *.cpp  -o program[32D./program > check.txt           [11D[11D           [12D[9Dclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[?1l>[?2004l
]2;lldb program]1;lldb(lldb) target create "program"
Current executable set to '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64).
(lldb) [1G[2m(lldb) [0m[8Gb cl[K[1G[2m(lldb) [0m[11G[K[1G[2m(lldb) [0m[10GCalculateAverageSalary
Breakpoint 1: where = program`Department::CalculateAverageSalary(Department::StaffTypes) + 32 at Department.cpp:69:6, address = 0x0000000100004178
(lldb) [1G[2m(lldb) [0m[8Grun
Process 79069 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

Process 79069 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gnn[K[1G[2m(lldb) [0m[9Gn[K[1G[2m(lldb) [0m[9G
Process 79069 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x000000010000417c[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m71[0m:[33m10[0m
[33m  [0m 68  	    [32mdouble[0m sum;
[33m  [0m 69  		sum = [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m->[0m 71  		[32mswitch[0m ([4mtype[0m)
[33m  [0m 72  		{
[33m  [0m 73  		[32mcase[0m Department::EMPLOYEE:		
[33m  [0m 74  			[32mfor[0m (i = [31m0[0m; i < Employees->size(); i++)
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 79069 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x00000001000041ac[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m74[0m:[33m10[0m
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
[33m  [0m 73  		[32mcase[0m Department::EMPLOYEE:		
[33m->[0m 74  			[32mfor[0m (i [4m=[0m [31m0[0m; i < Employees->size(); i++)
[33m  [0m 75  			{
[33m  [0m 76  				sum += Employees->at(i).getSalary();
[33m  [0m 77  			}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 79069 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x00000001000041dc[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m76[0m:[33m11[0m
[33m  [0m 73  		[32mcase[0m Department::EMPLOYEE:		
[33m  [0m 74  			[32mfor[0m (i = [31m0[0m; i < Employees->size(); i++)
[33m  [0m 75  			{
[33m->[0m 76  				sum += [4mEmployees[0m->at(i).getSalary();
[33m  [0m 77  			}
[33m  [0m 78  			[32mbreak[0m;
[33m  [0m 79  		[32mcase[0m Department::PROGRAMMER:
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gn
Process 79069 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
    frame #0: [33m0x00000001000041fc[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m77[0m:[33m3[0m
[33m  [0m 74  			[32mfor[0m (i = [31m0[0m; i < Employees->size(); i++)
[33m  [0m 75  			{
[33m  [0m 76  				sum += Employees->at(i).getSalary();
[33m->[0m 77  			[4m}[0m
[33m  [0m 78  			[32mbreak[0m;
[33m  [0m 79  		[32mcase[0m Department::PROGRAMMER:
[33m  [0m 80  			[32mfor[0m (i = [31m0[0m; i < Programmers->size(); i++)
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfa[K[1G[2m(lldb) [0m[9Gr v
(Department *) this = 0x000000016fdff5b0
(Department::StaffTypes) type = EMPLOYEE
(double) sum = 3000
(int) i = 0
(lldb) [1G[2m(lldb) [0m[8Gv[K[1G[2m(lldb) [0m[8Gbr
Commands for operating on breakpoints (see 'help b' for shorthand.)

Syntax: breakpoint <subcommand> [<command-options>]

The following subcommands are supported:

      clear   -- Delete or disable breakpoints matching the specified source file and line.
      command -- Commands for adding, removing and listing LLDB commands executed when a breakpoint is hit.
      delete  -- Delete the specified breakpoint(s).  If no breakpoints are specified, delete them all.
      disable -- Disable the specified breakpoint(s) without deleting them.  If none are specified, disable all breakpoints.
      enable  -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, enable all of them.
      list    -- List some or all breakpoints at configurable levels of detail.
      modify  -- Modify the options on a breakpoint or set of breakpoints in the executable.  If no breakpoint is specified, acts on the last created
                 breakpoint.  With the exception of -e, -d and -i, passing an empty argument clears the modification.
      name    -- Commands to manage name tags for breakpoints
      read    -- Read and set the breakpoints previously saved to a file with "breakpoint write".  
      set     -- Sets a breakpoint or set of breakpoints in the executable.
      write   -- Write the breakpoints listed to a file that can be read in with "breakpoint read".  If given no arguments, writes all breakpoints.

For more help on any particular subcommand, type 'help <command> <subcommand>'.
(lldb) [1G[2m(lldb) [0m[8Gbt
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep over[0m
  * frame #0: [33m0x00000001000041fc[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m77[0m:[33m3[0m
    frame #1: [33m0x000000010000e5b8[0m program`main at [36mmain.cpp[0m:[33m111[0m:[33m56[0m
    frame #2: [33m0x000000010005508c[0m dyld`start + 520
(lldb) [1G[2m(lldb) [0m[8Gb main.cpp:115
Breakpoint 2: where = program`main + 4984 at main.cpp:115:7, address = 0x000000010000e6a4
(lldb) [1G[2m(lldb) [0m[8Grun
There is a running process, kill it and restart?: [Y/n] y
Process 79069 exited with status = 9 (0x00000009) 
Process 79084 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average R&D Employee Salary is: 5500.00
Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=PROGRAMMER) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average R&D Programmer Salary is: 2225.00
Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average R&D Software Architect Salary is: 3399.50

Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 2.1[0m
    frame #0: [33m0x000000010000e6a4[0m program`main at [36mmain.cpp[0m:[33m115[0m:[33m7[0m
[33m  [0m 112 		cout << "The Average R&D Programmer Salary is: " << RnD.CalculateAverageSalary(RnD.PROGRAMMER) << endl;
[33m  [0m 113 		cout << "The Average R&D Software Architect Salary is: " << RnD.CalculateAverageSalary(RnD.SOFTWAREARCHITECTS) << endl;
[33m  [0m 114 		cout << "\n";
[33m->[0m 115 		cout [4m<<[0m "The Average IT Employee Salary is: " << IT.CalculateAverageSalary(IT.EMPLOYEE) << endl;
[33m  [0m 116 		cout << "The Average IT Programmer Salary is: " << IT.CalculateAverageSalary(IT.PROGRAMMER) << endl;
[33m  [0m 117 		cout << "The Average IT Software Architect Salary is: " << IT.CalculateAverageSalary(IT.SOFTWAREARCHITECTS) << endl;
[33m  [0m 118 	
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff550, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average IT Employee Salary is: nan
Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff550, type=PROGRAMMER) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average IT Programmer Salary is: 1700.00
Process 79084 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff550, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79084 resuming
The Average IT Software Architect Salary is: nan
Process 79084 exited with status = 0 (0x00000000) 
(lldb) [1G[2m(lldb) [0m[8Grun
Process 79089 launched: '/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code /program' (arm64)
  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=EMPLOYEE) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79089 resuming
The Average R&D Employee Salary is: 5500.00
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=PROGRAMMER) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gc
Process 79089 resuming
The Average R&D Programmer Salary is: 2225.00
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1[0m
    frame #0: [33m0x0000000100004178[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m69[0m:[33m6[0m
[33m  [0m 66  	[32mdouble[0m Department::CalculateAverageSalary(StaffTypes type)
[33m  [0m 67  	{
[33m  [0m 68  	    [32mdouble[0m sum;
[33m->[0m 69  		sum [4m=[0m [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m  [0m 71  		[32mswitch[0m (type)
[33m  [0m 72  		{
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfr v
(Department *) this = 0x000000016fdff5b0
(Department::StaffTypes) type = SOFTWAREARCHITECTS
(double) sum = 3.9807452675770102E-314
(int) i = 1
(lldb) [1G[2m(lldb) [0m[8Gs
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000417c[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m71[0m:[33m10[0m
[33m  [0m 68  	    [32mdouble[0m sum;
[33m  [0m 69  		sum = [31m0.0[0m;
[33m  [0m 70  		[32mint[0m i;
[33m->[0m 71  		[32mswitch[0m ([4mtype[0m)
[33m  [0m 72  		{
[33m  [0m 73  		[32mcase[0m Department::EMPLOYEE:		
[33m  [0m 74  			[32mfor[0m (i = [31m0[0m; i < Employees->size(); i++)
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000427c[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m86[0m:[33m10[0m
[33m  [0m 83  			}
[33m  [0m 84  			[32mbreak[0m;
[33m  [0m 85  		[32mcase[0m Department::SOFTWAREARCHITECTS:
[33m->[0m 86  			[32mfor[0m (i [4m=[0m [31m0[0m; i < SoftwareArchitects->size(); i++)
[33m  [0m 87  			{
[33m  [0m 88  				sum += SoftwareArchitects->at(i).getSalary();
[33m  [0m 89  			}
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gs
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x00000001000042ac[0m program`Department::CalculateAverageSalary(this=0x000000016fdff5b0, type=SOFTWAREARCHITECTS) at [36mDepartment.cpp[0m:[33m88[0m:[33m11[0m
[33m  [0m 85  		[32mcase[0m Department::SOFTWAREARCHITECTS:
[33m  [0m 86  			[32mfor[0m (i = [31m0[0m; i < SoftwareArchitects->size(); i++)
[33m  [0m 87  			{
[33m->[0m 88  				sum += [4mSoftwareArchitects[0m->at(i).getSalary();
[33m  [0m 89  			}
[33m  [0m 90  			[32mbreak[0m;
[33m  [0m 91  		[32mdefault[0m:
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfr v -a
(double) sum = 0
(int) i = 0
(lldb) [1G[2m(lldb) [0m[8Gv[K[1G[2m(lldb) [0m[8Gfr v SoftwareArchitects->size()
error: "size()" is not a member of "(std::__1::vector<SoftwareArchitect, std::__1::allocator<SoftwareArchitect> > *) this->SoftwareArchitects"
(lldb) [1G[2m(lldb) [0m[8Gs
Process 79089 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mstep in[0m
    frame #0: [33m0x000000010000bfd0[0m program`Employee::getSalary(this=0x0000000100304450) const at [36memployeeClass.cpp[0m:[33m39[0m:[33m9[0m
[33m  [0m 36  	}
[33m  [0m 37  	
[33m  [0m 38  	[32mdouble[0m Employee::getSalary() [32mconst[0m {
[33m->[0m 39  		[32mreturn[0m [4msalary[0m;
[33m  [0m 40  	}
[33m  [0m 41  	
[33m  [0m 42  	[32mint[0m Employee::getHireYear() [32mconst[0m
Target 0: (program) stopped.
(lldb) [1G[2m(lldb) [0m[8Gfr v -a
(lldb) [1G[2m(lldb) [0m[8Gc[K[1G[2m(lldb) [0m[8Gs[K[1G[2m(lldb) [0m[8Gq
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[44C[39m[0m[49m[31m[39m[41m[38;5;226m 24:50[38;5;226m Dur [39m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 20:58:55[K[00m[39m[49m[70D[?1h=[?2004hlldb program[12D./program   [9Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1mDepartment.cpp:96:17: [0m[0;1;31merror: [0m[1mexpected expression[0m
    (sum = 0) ? return 0 : return sum/i;
[0;1;32m                ^
[0m[1mDepartment.cpp:96:17: [0m[0;1;31merror: [0m[1mexpected ':'[0m
    (sum = 0) ? return 0 : return sum/i;
[0;1;32m                ^
[0m[0;32m                : 
[0m[1mDepartment.cpp:96:15: [0m[0;1;30mnote: [0mto match this '?'[0m
    (sum = 0) ? return 0 : return sum/i;
[0;1;32m              ^
[0m[1mDepartment.cpp:96:17: [0m[0;1;31merror: [0m[1mexpected expression[0m
    (sum = 0) ? return 0 : return sum/i;
[0;1;32m                ^
[0m3 errors generated.
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[54C[39m[0m[49m[31m[39m[41m[38;5;226m 1[38;5;226m ↵ [39m[37m[39m[47m[30m 20:58:58[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12D./program   [9Dlldb program[12Dclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1mDepartment.cpp:96:18: [0m[0;1;31merror: [0m[1mexpected expression[0m
    (sum == 0) ? return 0 : return sum/i;
[0;1;32m                 ^
[0m[1mDepartment.cpp:96:18: [0m[0;1;31merror: [0m[1mexpected ':'[0m
    (sum == 0) ? return 0 : return sum/i;
[0;1;32m                 ^
[0m[0;32m                 : 
[0m[1mDepartment.cpp:96:16: [0m[0;1;30mnote: [0mto match this '?'[0m
    (sum == 0) ? return 0 : return sum/i;
[0;1;32m               ^
[0m[1mDepartment.cpp:96:18: [0m[0;1;31merror: [0m[1mexpected expression[0m
    (sum == 0) ? return 0 : return sum/i;
[0;1;32m                 ^
[0m3 errors generated.
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[54C[39m[0m[49m[31m[39m[41m[38;5;226m 1[38;5;226m ↵ [39m[37m[39m[47m[30m 20:59:59[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[?1l>[?2004l
]2;clang++ -g -O0 *.cpp -o program]1;clang++[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 21:01:32[K[00m[39m[49m[70D[?1h=[?2004hclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12Dclang++ -g -O0 *.cpp  -o program[32Dlldb program        [2C          [20D[12D./program   [?1l>[?2004l
]2;./program]1;./program  Here is the List of all the Staff in the R&D Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

   Mike  11        Multimedia Prog.   2500.00      2014      Mary         5         CSS

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0
  Here is the List of all the Staff in the IT Department: 
  ------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

    Roy  32           Network Prog.   1900.00      2016       N/A         7        JAVA

   Jane  35                  Tester   1500.00      2018       Roy         7        JAVA

 Removing Mike from the company: Succeeded
 -------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

   Josh   1   Technology Specialist   3000.00      2015

   Mary   2         Project Manager   5500.00      2010

   Marc   3    Research Team Leader   8000.00      2007

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

   John  21    Senior Software Eng.   4899.00      2011      Marc         6                    7

 Connor  24      Software Developer   1900.00      2017      John         8                    0

  Here is the List of all the Programmers who know C++ in the R&D Department: 
  ---------------------------------------------------------------------------
   Name  ID          Title            Salary   Year Hired  Supervisor  ProjectID Prog.Lang. #Exp Years

  Julie  12     Mainframe Sys.Prog.   2150.00      2013      Mary         5         C++

 Albert  13                OS Prog.   2300.00      2015      Mary         9         C++

 Listing All Project IDs:  5 6 8 9
-------------------------
The Highest R&D Employee Salary is: 8000.00
The Highest R&D Programmer Salary is: 2300.00
The Highest R&D Software Architect Salary is: 4899.00

The Average R&D Employee Salary is: 5500.00
The Average R&D Programmer Salary is: 2225.00
The Average R&D Software Architect Salary is: 3399.50

The Average IT Employee Salary is: 0.00
The Average IT Programmer Salary is: 1700.00
The Average IT Software Architect Salary is: 0.00
[1m[7m%[27m[1m[0m                                                                                                                                                            ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20]2;jinny@Jinnys-MacBook-Pro]1;..g/Buggy code ]7;file://Jinnys-MacBook-Pro.local/Users/jinny/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy%20code%20[0m[27m[24m[J[39m[0m[49m[48;5;17m [38;5;231m Jinny [48;5;248m[38;5;17m [30m~/MSD/myGithubRepo/my6015Repo/Lab2_Debugging/Buggy code  [43m[38;5;248m [30m main ✚ ● ? [49m[33m[39m [K[56C[39m[0m[49m[38;5;39m[39m[48;5;39m[30m [30m✔ [39m[37m[39m[47m[30m 21:01:35[K[00m[39m[49m[70D[?1h=[?2004heexit[?1l>[?2004l
]2;exit]1;exit
Saving session...completed.

Script done on Thu Jan 26 21:08:41 2023
